"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _fileSaver = _interopRequireDefault(require("file-saver"));

var _csv = _interopRequireDefault(require("./lib/csv"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var CsvDownload =
/*#__PURE__*/
function (_Component) {
  _inherits(CsvDownload, _Component);

  function CsvDownload() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, CsvDownload);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(CsvDownload)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "handleClick", function () {
      var _this$props = _this.props,
          suffix = _this$props.suffix,
          prefix = _this$props.prefix,
          bom = _this$props.bom,
          columns = _this$props.columns,
          datas = _this$props.datas,
          separator = _this$props.separator,
          noHeader = _this$props.noHeader,
          wrapColumnChar = _this$props.wrapColumnChar;
      var csv = (0, _csv["default"])(columns, datas, separator, noHeader, wrapColumnChar);
      var bomCode = bom ? "\uFEFF" : '';
      var filename = _this.props.filename;

      if (filename.indexOf('.csv') < 0) {
        filename += '.csv';
      }

      if (suffix) {
        filename = typeof suffix === 'string' || typeof suffix === 'number' ? filename.replace('.csv', "_".concat(suffix, ".csv")) : filename.replace('.csv', "_".concat(new Date().getTime(), ".csv"));
      }

      if (prefix) {
        filename = typeof prefix === 'string' || typeof prefix === 'number' ? "".concat(prefix, "_").concat(filename) : "".concat(new Date().getTime(), "_").concat(filename);
      }

      var blob = new Blob(["".concat(bomCode).concat(csv)], {
        type: 'text/csv;charset=utf-8'
      });

      _fileSaver["default"].saveAs(blob, filename);
    });

    return _this;
  }

  _createClass(CsvDownload, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          children = _this$props2.children,
          text = _this$props2.text;
      return typeof children === 'undefined' ? _react["default"].createElement("button", {
        onClick: this.handleClick,
        type: "button"
      }, text || 'Download') : _react["default"].createElement("div", {
        onClick: this.handleClick,
        onKeyPress: this.handleClick,
        role: "button",
        tabIndex: 0
      }, children);
    }
  }]);

  return CsvDownload;
}(_react.Component);

exports["default"] = CsvDownload;

var PrefixSuffixType = _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].string, _propTypes["default"].number]);

CsvDownload.propTypes = {
  bom: _propTypes["default"].bool,
  children: _propTypes["default"].oneOfType([_propTypes["default"].array, _propTypes["default"].string, _propTypes["default"].element]),
  columns: _propTypes["default"].oneOfType([_propTypes["default"].bool, _propTypes["default"].array, _propTypes["default"].arrayOf(_propTypes["default"].object)]),
  datas: _propTypes["default"].arrayOf(_propTypes["default"].oneOfType([_propTypes["default"].object, _propTypes["default"].array])).isRequired,
  filename: _propTypes["default"].string.isRequired,
  noHeader: _propTypes["default"].bool,
  prefix: PrefixSuffixType,
  separator: _propTypes["default"].string,
  text: _propTypes["default"].string,
  suffix: PrefixSuffixType,
  wrapColumnChar: _propTypes["default"].string
};
CsvDownload.defaultProps = {
  separator: ',',
  columns: false,
  bom: true,
  noHeader: false
};