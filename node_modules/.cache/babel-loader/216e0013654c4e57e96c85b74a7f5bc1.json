{"ast":null,"code":"export default function (values, valueof) {\n  var min;\n  var max;\n\n  if (valueof === undefined) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var value = _step.value;\n\n        if (value != null) {\n          if (min === undefined) {\n            if (value >= value) min = max = value;\n          } else {\n            if (min > value) min = value;\n            if (max < value) max = value;\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  } else {\n    var index = -1;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = values[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var _value = _step2.value;\n\n        if ((_value = valueof(_value, ++index, values)) != null) {\n          if (min === undefined) {\n            if (_value >= _value) min = max = _value;\n          } else {\n            if (min > _value) min = _value;\n            if (max < _value) max = _value;\n          }\n        }\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n          _iterator2[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n  }\n\n  return [min, max];\n}","map":{"version":3,"sources":["C:/Users/mesty/Lambda/Forked-Lambda-Copies/labs 19/sauti-databank-fe/node_modules/d3-array/src/extent.js"],"names":["values","valueof","min","max","undefined","value","index"],"mappings":"AAAA,eAAe,UAASA,MAAT,EAAiBC,OAAjB,EAA0B;AACvC,MAAIC,GAAJ;AACA,MAAIC,GAAJ;;AACA,MAAIF,OAAO,KAAKG,SAAhB,EAA2B;AAAA;AAAA;AAAA;;AAAA;AACzB,2BAAoBJ,MAApB,8HAA4B;AAAA,YAAjBK,KAAiB;;AAC1B,YAAIA,KAAK,IAAI,IAAb,EAAmB;AACjB,cAAIH,GAAG,KAAKE,SAAZ,EAAuB;AACrB,gBAAIC,KAAK,IAAIA,KAAb,EAAoBH,GAAG,GAAGC,GAAG,GAAGE,KAAZ;AACrB,WAFD,MAEO;AACL,gBAAIH,GAAG,GAAGG,KAAV,EAAiBH,GAAG,GAAGG,KAAN;AACjB,gBAAIF,GAAG,GAAGE,KAAV,EAAiBF,GAAG,GAAGE,KAAN;AAClB;AACF;AACF;AAVwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAW1B,GAXD,MAWO;AACL,QAAIC,KAAK,GAAG,CAAC,CAAb;AADK;AAAA;AAAA;;AAAA;AAEL,4BAAkBN,MAAlB,mIAA0B;AAAA,YAAjBK,MAAiB;;AACxB,YAAI,CAACA,MAAK,GAAGJ,OAAO,CAACI,MAAD,EAAQ,EAAEC,KAAV,EAAiBN,MAAjB,CAAhB,KAA6C,IAAjD,EAAuD;AACrD,cAAIE,GAAG,KAAKE,SAAZ,EAAuB;AACrB,gBAAIC,MAAK,IAAIA,MAAb,EAAoBH,GAAG,GAAGC,GAAG,GAAGE,MAAZ;AACrB,WAFD,MAEO;AACL,gBAAIH,GAAG,GAAGG,MAAV,EAAiBH,GAAG,GAAGG,MAAN;AACjB,gBAAIF,GAAG,GAAGE,MAAV,EAAiBF,GAAG,GAAGE,MAAN;AAClB;AACF;AACF;AAXI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYN;;AACD,SAAO,CAACH,GAAD,EAAMC,GAAN,CAAP;AACD","sourcesContent":["export default function(values, valueof) {\n  let min;\n  let max;\n  if (valueof === undefined) {\n    for (const value of values) {\n      if (value != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  } else {\n    let index = -1;\n    for (let value of values) {\n      if ((value = valueof(value, ++index, values)) != null) {\n        if (min === undefined) {\n          if (value >= value) min = max = value;\n        } else {\n          if (min > value) min = value;\n          if (max < value) max = value;\n        }\n      }\n    }\n  }\n  return [min, max];\n}\n"]},"metadata":{},"sourceType":"module"}