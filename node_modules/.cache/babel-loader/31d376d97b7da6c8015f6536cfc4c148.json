{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\mesty\\\\Lambda\\\\Forked-Lambda-Copies\\\\labs 19\\\\sauti-databank-fe\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"C:\\\\Users\\\\mesty\\\\Lambda\\\\Forked-Lambda-Copies\\\\labs 19\\\\sauti-databank-fe\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport graphLabels from \"./graphLabels\";\nimport getIndex from '../DataParseHelpers/getIndex';\nimport removeMultiple from './removeMultiple';\n\nvar dataParse = function dataParse(indexBy, data, crossFilter, startDate, endDate, additionalFilter, queryType) {\n  try {\n    var dataStructure = [];\n    console.log('data at beginning', data); //when single filtering \"Most Requested\" graph\n\n    if (queryType === \"Sessions\" && crossFilter === \"\") {\n      data = filterByDate(data, startDate, endDate);\n      data = removeMultiple(data);\n      dataStructure = getIndex(data, indexBy);\n      return getMostRequested(data, dataStructure, indexBy);\n    } //when cross-filtering \"Most Requested\" as index\n    else if (queryType === \"Sessions\" && crossFilter !== \"\") {\n        data = filterByDate(data, startDate, endDate);\n        data = removeMultiple(data);\n        dataStructure = getIndex(data, indexBy);\n        return setCrossedItems(data, dataStructure, crossFilter, indexBy, additionalFilter);\n      } else {\n        //telling function how to format data. See \"graphLabels.js\"\n        dataStructure = graphLabels[\"\".concat(indexBy)].structure.map(function (item) {\n          return item;\n        }); //when cross-filtering and index is Not \"Most Requested\"\n\n        if (crossFilter !== \"\") {\n          data = removeMultiple(data);\n          return setCrossedItems(data, dataStructure, crossFilter, indexBy, additionalFilter);\n        } else {\n          //when single filtering with index that is not \"Most Requested\"\n          data = removeMultiple(data);\n          return setItem(data, dataStructure, indexBy);\n        }\n      }\n  } catch (error) {\n    alert(\"There was an error getting the data. This can happen if you select too many filters and there is no data for that subset. The page will automatically refresh.\");\n    window.location.reload();\n  }\n};\n\nvar setCrossedItems = function setCrossedItems(data, dataStructure, crossFilter, indexBy, additionalFilter) {\n  //will be used to store all possible values for the index value, which is referring to a column in the database table\n  var indexByValues = []; //will be used to store all possible values for the cross filter value, which is referring to a column in the database table\n\n  var crossFilterValues = []; //will be used to store array of objects, where the key will be what is being cross filtered by / \"crossFilter\"\n  // and the value is every possible value for that cross filter in the database\n\n  var crossFilterKeys = []; // IF NOT A \"MOST REQUESTED\" GRAPH, SETS THE KEYS IN A PREDETERMINED ORDER BASED ON WHAT ORDER LANCE WANTS THEM IN\n  // OTHERWISE IT IS GOING TO BE SORTED MOST TO LEAST REQUESTED AT A LATER TIME\n\n  if (graphLabels[\"\".concat(crossFilter)]) {\n    crossFilterKeys = graphLabels[\"\".concat(crossFilter)].structure;\n  } else {\n    crossFilterKeys = getIndex(data, crossFilter);\n  } // Puts each value from key:value pair into an array\n  // ['Female', 'Male', null]\n\n\n  dataStructure.forEach(function (obj) {\n    return indexByValues.push(Object.values(obj)[0]);\n  });\n  crossFilterKeys.forEach(function (obj) {\n    return Object.values(obj)[0] !== null && crossFilterValues.push(Object.values(obj)[0]);\n  }); // Building an array of objects where each object is formatted in this way\n  // ex: if indexBy = \"gender\" and crossFilter = \"age\"\n  // {\"gender\": \"Male\", \"10-20\": 167, \"20-30\": 237, \"30-40\": 642, \"40-50\": 210, \"50-60\": 123, \"60-70\": 1}\n  // There will be an object like this for each value of the indexByValues ex: [\"Male\", \"Female\"]\n\n  indexByValues.forEach(function (key, index) {\n    var crossFilteredData = [];\n    var filtered = data.filter(function (trader) {\n      return trader[\"\".concat(indexBy)] === key;\n    });\n    crossFilterValues.forEach(function (key, index) {\n      var crossFiltered = filtered.filter(function (trader) {\n        return trader[\"\".concat(crossFilter)] === key;\n      });\n      crossFilteredData.push(_defineProperty({}, \"\".concat(key), crossFiltered.length));\n    });\n    crossFilteredData.forEach(function (obj) {\n      return dataStructure[index] = _objectSpread({}, dataStructure[index], _defineProperty({}, \"\".concat(Object.keys(obj)[0]), [\"\".concat(Object.values(obj)[0])][0]));\n    });\n  }); //If graph is \"Most Requested\" sort from Most to Least requested and provide top 7 objects\n\n  var keyValueArrIndex = [];\n  var keyValueArrCross = [];\n  var newDataStructure = [];\n\n  if (!graphLabels[\"\".concat(indexBy)] && graphLabels[\"\".concat(crossFilter)]) {\n    dataStructure.map(function (obj) {\n      return keyValueArrIndex.push([obj[\"\".concat(indexBy)], Object.values(obj).slice(1).reduce(function (a, b) {\n        return a + b;\n      })]);\n    });\n    keyValueArrIndex = keyValueArrIndex.sort(function (a, b) {\n      return b[1] - a[1];\n    }).slice(0, 7);\n    keyValueArrIndex.forEach(function (arr) {\n      for (var i = 0, len = dataStructure.length; i < len; i++) {\n        if (arr[0] === dataStructure[i][\"\".concat(indexBy)]) {\n          newDataStructure.push(dataStructure[i]);\n        }\n      }\n    });\n    dataStructure = newDataStructure;\n  }\n\n  ;\n\n  if (!graphLabels[\"\".concat(crossFilter)] && graphLabels[\"\".concat(indexBy)]) {\n    dataStructure.forEach(function (obj) {\n      var crossKeys = Object.keys(obj);\n      var crossValues = Object.values(obj);\n      var tempCrossArr = [];\n      crossKeys.forEach(function (key, index) {\n        tempCrossArr.push([key, crossValues[index]]);\n      });\n      var slicedCrossArr = tempCrossArr.sort(function (a, b) {\n        return b[1] - a[1];\n      }).slice(0, 7);\n      crossFilterValues = [];\n      slicedCrossArr.slice(1).forEach(function (arr) {\n        crossFilterValues.push(arr[0]);\n      });\n      var tempObj = {};\n      slicedCrossArr.forEach(function (arr) {\n        tempObj = _objectSpread({}, tempObj, _defineProperty({}, arr[0], arr[1]));\n      });\n      newDataStructure.push(tempObj);\n    });\n    dataStructure = newDataStructure;\n  }\n\n  ;\n\n  if (!graphLabels[\"\".concat(crossFilter)] && !graphLabels[\"\".concat(indexBy)]) {\n    //commodityproduct: \"Maize\", \"KEN\": 123, \"RWA\": 200\n    //commodityproduct: \"Beans\", \"KEN\": 152, \"RWA\": 478\n    dataStructure.map(function (obj) {\n      if (obj[\"\".concat(indexBy)] !== null && obj[\"\".concat(indexBy)] !== undefined) {\n        return keyValueArrIndex.push([obj[\"\".concat(indexBy)], Object.values(obj).slice(1).reduce(function (a, b) {\n          return +a + +b;\n        })]);\n      }\n\n      ;\n    });\n    keyValueArrIndex = keyValueArrIndex.sort(function (a, b) {\n      return b[1] - a[1];\n    }).slice(0, 7);\n    console.log('keyvalArr', keyValueArrIndex);\n    keyValueArrIndex.forEach(function (arr) {\n      newDataStructure.push(_defineProperty({}, indexBy, arr[0]));\n    });\n    var topSeven = [];\n    newDataStructure.forEach(function (item) {\n      topSeven.push(item[\"\".concat(indexBy)]);\n    });\n    dataStructure = dataStructure.filter(function (obj) {\n      return topSeven.includes(obj[\"\".concat(indexBy)]);\n    });\n    var keysToSort = Object.keys(dataStructure[0]).slice(1);\n    var tempObj = {};\n    keysToSort.forEach(function (item) {\n      return tempObj = _objectSpread({}, tempObj, _defineProperty({}, \"\".concat(item), 0));\n    });\n    keysToSort = tempObj;\n    dataStructure.forEach(function (obj) {\n      for (var key in obj) {\n        if (Number.isInteger(+obj[key])) keysToSort[key] += Number(obj[key]);\n      }\n    });\n    var crossKeys = Object.keys(keysToSort).filter(function (item) {\n      return item !== undefined && item !== 'undefined';\n    });\n    var crossValues = Object.values(keysToSort);\n    var tempCrossArr = [];\n    crossKeys.forEach(function (key, index) {\n      tempCrossArr.push([key, crossValues[index]]);\n    });\n    var slicedCrossArr = tempCrossArr.sort(function (a, b) {\n      return b[1] - a[1];\n    }).slice(0, 7);\n    crossFilterValues = [];\n    slicedCrossArr.forEach(function (arr) {\n      crossFilterValues.push(arr[0]);\n    });\n    var temp = {};\n    slicedCrossArr.forEach(function (arr) {\n      temp = _objectSpread({}, temp, _defineProperty({}, arr[0], arr[1]));\n    });\n    keysToSort = temp;\n    var keysToKeep = Object.keys(keysToSort); //build on new ds from ds\n\n    dataStructure.forEach(function (obj, index) {\n      var tempObject = _defineProperty({}, indexBy, obj[indexBy]);\n\n      for (var key in obj) {\n        if (keysToKeep.includes(key)) {\n          tempObject = _objectSpread({}, tempObject, _defineProperty({}, key, obj[key]));\n        }\n      }\n\n      console.log('temp object tho', tempObject);\n      dataStructure[index] = tempObject;\n    });\n    console.log('data structer what up', dataStructure);\n  } /// KEYS TO SORT IS AN ARRAY OF OBJECTS YOU IDIOT\n\n\n  dataStructure = dataStructure.filter(function (obj) {\n    return obj[\"\".concat(indexBy)] !== null;\n  }); // GET SAMPLE SIZE\n  // For each object, want to add up numbers skipping first key value pair, which is the index and will not have a number as value\n  //[{gender: \"Male\", \"10-20\": 200, \"20-30\": 150}, {gender: \"Female\", \"10-20\": 140, \"20-30\": 100}]\n  // add values where not indexing by\n  // {\"Male\": 350, \"Female\": 240}\n\n  var sampleArr = {};\n  dataStructure.map(function (item) {\n    var sampleSize = 0; //[\"Male\", \"130\", \"100\", \"34\"]\n\n    var valuesArr = Object.values(item);\n    valuesArr.forEach(function (value) {\n      if (Number.isInteger(+value)) {\n        return sampleSize += Number(value);\n      }\n\n      ;\n    });\n    return sampleArr = _objectSpread({}, sampleArr, _defineProperty({}, \"\".concat(valuesArr[0]), sampleSize));\n  }); //This is the sampleSize of all responses {\"Male\": 153, \"Female\": 124 => totalSampleSize: 277}\n\n  var totalSampleSize = Object.values(sampleArr).reduce(function (a, b) {\n    return a + b;\n  }); //CHANGE VALUES TO PERCENTAGE OF SAMPLE SIZE\n  //[{gender: \"Male\", \"10-20\": 200, \"20-30\": 150},{gender: \"Female\", \"10-20\": 140, \"20-30\": 100}]\n  // dataStructure becomes data set for a csv file, and percentageData is for nivo chart.\n\n  var percentageData = dataStructure.map(function (obj) {\n    return Object.assign({}, obj);\n  });\n  percentageData.forEach(function (obj) {\n    for (var property in obj) {\n      if (Number.isInteger(+obj[property])) {\n        obj[property] = +(obj[property] / sampleArr[obj[\"\".concat(indexBy)]] * 100).toFixed(1);\n      }\n    }\n  }); // ABBREVIATE LABELS IF THERE ARE ANY TO ABBREVIATE (SEE BELOW)\n\n  abbreviateLabels(percentageData, indexBy);\n  var additionalFilterOptions = getIndex(data, additionalFilter).map(function (obj) {\n    return Object.values(obj)[0];\n  }).filter(function (str) {\n    return str !== null;\n  });\n  console.log('datastructure', dataStructure);\n  console.log('crossfiltervalues', crossFilterValues);\n  console.log('percentageData', percentageData);\n  return {\n    dataStructure: dataStructure,\n    crossFilterValues: crossFilterValues,\n    indexBy: indexBy,\n    totalSampleSize: totalSampleSize,\n    additionalFilterOptions: additionalFilterOptions,\n    percentageData: percentageData\n  };\n}; // Sets single filter index\n// Puts each value from key:value pair into an array\n// ['Female', 'Male', null]\n\n\nvar setItem = function setItem(data, dataStructure, indexBy) {\n  var arr = [];\n  dataStructure.forEach(function (obj) {\n    return arr.push(Object.values(obj)[0]);\n  }); // For each object get every trader at the index where it equals the value in the arr\n\n  arr.forEach(function (key, index) {\n    var filtered = data.filter(function (trader) {\n      return trader[\"\".concat(indexBy)] === key;\n    }).length;\n    dataStructure[index] = _objectSpread({}, dataStructure[index], _defineProperty({}, \"\".concat(arr[index]), filtered));\n  }); // This block of code transforms from raw numbers to rounded percentages\n\n  var numberValues = [];\n  var sampleSize = 0;\n  dataStructure.map(function (item) {\n    var keyValue = item[\"\".concat(indexBy)];\n    numberValues.push(Number(item[keyValue]));\n    return sampleSize += Number(item[keyValue]);\n  });\n  var percentageData = dataStructure.map(function (obj) {\n    return Object.assign({}, obj);\n  });\n  percentageData.forEach(function (obj) {\n    var keyValue = obj[\"\".concat(indexBy)];\n    obj[keyValue] = (obj[keyValue] / sampleSize * 100).toFixed(1);\n  });\n  return {\n    dataStructure: dataStructure,\n    percentageData: percentageData,\n    keys: graphLabels[\"\".concat(indexBy)].labels,\n    indexBy: indexBy,\n    sampleSize: sampleSize\n  };\n}; //Builds data for Nivo when single filtering by \"Most Requested\"\n\n\nvar getMostRequested = function getMostRequested(data, dataStructure, indexBy) {\n  var _percentageData$push;\n\n  var arr = []; // Puts each value from key:value pair into an array\n  // ['Maize', 'Clothes', 'Bananas']\n\n  dataStructure.forEach(function (obj) {\n    return arr.push(Object.values(obj)[0]);\n  }); // For each object get every trader at the index where it equals the value in the arr\n\n  arr.forEach(function (key, index) {\n    var filtered = data.filter(function (value) {\n      return value[\"\".concat(indexBy)] === key;\n    }).length;\n    dataStructure[index] = _objectSpread({}, dataStructure[index], _defineProperty({}, \"\".concat(arr[index]), filtered));\n  });\n  dataStructure = dataStructure.filter(function (obj) {\n    return obj[\"\".concat(indexBy)] !== null;\n  }); // This block of code transforms from raw numbers to percentages\n\n  var sampleSize = 0;\n  dataStructure.map(function (item) {\n    var keyValue = item[\"\".concat(indexBy)];\n    return sampleSize += Number(item[keyValue]);\n  });\n  var csvKeys = dataStructure.map(function (obj) {\n    return obj[\"\".concat(indexBy)];\n  });\n  var percentageData = dataStructure.map(function (obj) {\n    return Object.assign({}, obj);\n  });\n  percentageData.forEach(function (obj) {\n    var keyValue = obj[\"\".concat(indexBy)];\n    obj[keyValue] = obj[keyValue] / sampleSize * 100;\n  }); // dataStructure used for csv, percentage for graph\n\n  percentageData = percentageData.sort(function (a, b) {\n    return Object.values(a)[1] > Object.values(b)[1] ? -1 : 1;\n  });\n  dataStructure = dataStructure.sort(function (a, b) {\n    return Object.values(a)[1] > Object.values(b)[1] ? -1 : 1;\n  });\n  var combinedNondisplayedEntries = percentageData.slice(6, percentageData.length - 1);\n  var count = 0;\n  combinedNondisplayedEntries.forEach(function (obj) {\n    var tempVar = obj[\"\".concat(indexBy)];\n    count += +obj[tempVar];\n  });\n  percentageData = percentageData.slice(0, 6);\n  percentageData.forEach(function (obj) {\n    var tempVar = obj[\"\".concat(indexBy)];\n    obj[tempVar] = obj[tempVar].toFixed(0);\n  });\n  percentageData.push((_percentageData$push = {}, _defineProperty(_percentageData$push, indexBy, \"Other\"), _defineProperty(_percentageData$push, \"Other\", count.toFixed(0)), _percentageData$push));\n  var keys = percentageData.map(function (obj) {\n    return obj[\"\".concat(indexBy)];\n  }); //Function abbreviates graph labels\n\n  if (indexBy === \"procedurerelevantagency\" || indexBy === \"procedurerequireddocument\" || indexBy === \"procedurecommodity\" || indexBy === \"procedureorigin\") {\n    abbreviateLabels(percentageData, indexBy);\n  }\n\n  return {\n    dataStructure: dataStructure,\n    keys: keys.reverse(),\n    csvKeys: csvKeys,\n    indexBy: indexBy,\n    sampleSize: sampleSize,\n    percentageData: percentageData\n  };\n}; //This function is invoked when filtering by certain categories where the keys may be too long for Nivo to display\n\n\nvar abbreviateLabels = function abbreviateLabels(dataStructure, indexBy) {\n  var replaceValues = {\n    //Agencies\n    \"Ministry of Agriculture Animal Industry & Fisheries (MAAIF)\": \"MAAIF\",\n    \"Kenya Revenue Authority (KRA)\": \"KRA\",\n    \"COMESA Trade Information Desk Office (TIDO)\": \"TIDO\",\n    \"Uganda National Bureau of Standards (UNBS)\": \"UNBS\",\n    \"PORT Health\": \"PORT Health\",\n    \"Kenya Plant Health Inspectorate Service (KEPHIS)\": \"KEPHIS\",\n    \"Uganda Revenue Authority (URA)\": \"URA\",\n    \"Kenya Bureau of Standards (KEBS)\": \"KEBS\",\n    \"National Biosafety Authority (NBA)\": \"NBA\",\n    \"Kenya National Chamber of Commerce & Industry (KNCCI)\": \"KNCCI\",\n    \"Clearing Agent\": \"Clearing Agent\",\n    \"Uganda Police Dpts\": \"UPD\",\n    //Documents\n    \"Import Permit\": \"Import Permit\",\n    \"Valid Invoice\": \"Valid Invoice\",\n    \"Simplified Certificate Of Origin (SCOO)\": \"SCOO\",\n    \"National ID Card/Passport\": \"Passport/ID\",\n    \"Yellow Fever Card\": \"YF Card\",\n    \"Certificate of Origin\": \"Cert of Origin\",\n    \"Phytosanitary Certificate\": \"Phyto Cert\",\n    \"Import Entry Declaration Form (SAD)\": \"SAD\",\n    \"Fumigation Certificate\": \"Fumigation Cert\",\n    \"Bill of Lading\": \"Bill of Lading\",\n    //Procedure Commodity\n    \"Clothes and Shoes (New)\": \"Clothes/Shoes (New)\",\n    \"Clothes and Shoes (Used)\": \"Clothes/Shoes (Used)\",\n    //\n    OutsideEAC: \"Outside EAC\"\n  };\n  dataStructure.forEach(function (obj) {\n    var longValue = obj[\"\".concat(indexBy)];\n\n    if (replaceValues[\"\".concat(longValue)]) {\n      obj[\"\".concat(indexBy)] = replaceValues[\"\".concat(longValue)];\n    }\n  });\n  return dataStructure;\n};\n\nvar filterByDate = function filterByDate(data, startDate, endDate) {\n  console.log(startDate, endDate);\n  startDate = startDate.replace(/-/g, \"\");\n  endDate = endDate.replace(/-/g, \"\");\n  var filteredData = data.filter(function (obj) {\n    var objectDate = +obj.created_date.split(\"T\")[0].replace(/-/g, \"\");\n    return objectDate > startDate && objectDate < endDate;\n  });\n  return filteredData;\n};\n\nexport default dataParse;","map":{"version":3,"sources":["C:/Users/mesty/Lambda/Forked-Lambda-Copies/labs 19/sauti-databank-fe/src/Components/dataParse.js"],"names":["graphLabels","getIndex","removeMultiple","dataParse","indexBy","data","crossFilter","startDate","endDate","additionalFilter","queryType","dataStructure","console","log","filterByDate","getMostRequested","setCrossedItems","structure","map","item","setItem","error","alert","window","location","reload","indexByValues","crossFilterValues","crossFilterKeys","forEach","obj","push","Object","values","key","index","crossFilteredData","filtered","filter","trader","crossFiltered","length","keys","keyValueArrIndex","keyValueArrCross","newDataStructure","slice","reduce","a","b","sort","arr","i","len","crossKeys","crossValues","tempCrossArr","slicedCrossArr","tempObj","undefined","topSeven","includes","keysToSort","Number","isInteger","temp","keysToKeep","tempObject","sampleArr","sampleSize","valuesArr","value","totalSampleSize","percentageData","assign","property","toFixed","abbreviateLabels","additionalFilterOptions","str","numberValues","keyValue","labels","csvKeys","combinedNondisplayedEntries","count","tempVar","reverse","replaceValues","OutsideEAC","longValue","replace","filteredData","objectDate","created_date","split"],"mappings":"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","sourcesContent":["import graphLabels from \"./graphLabels\";\r\nimport getIndex from '../DataParseHelpers/getIndex'\r\nimport removeMultiple from './removeMultiple'\r\n\r\n\r\nconst dataParse = (\r\n  indexBy,\r\n  data,\r\n  crossFilter,\r\n  startDate,\r\n  endDate,\r\n  additionalFilter,\r\n  queryType\r\n) => {\r\n  try{\r\n  let dataStructure = [];\r\n  console.log('data at beginning', data)\r\n\r\n  //when single filtering \"Most Requested\" graph\r\n  if (queryType === \"Sessions\" && crossFilter === \"\") {\r\n    data = filterByDate(data, startDate, endDate);\r\n    data = removeMultiple(data)\r\n    dataStructure = getIndex(data, indexBy);\r\n    return getMostRequested(data, dataStructure, indexBy);\r\n  }\r\n  //when cross-filtering \"Most Requested\" as index\r\n  else if (queryType === \"Sessions\" && crossFilter !== \"\") {\r\n    data = filterByDate(data, startDate, endDate);\r\n    data = removeMultiple(data)\r\n    dataStructure = getIndex(data, indexBy);\r\n    return setCrossedItems(data, dataStructure, crossFilter, indexBy, additionalFilter);\r\n  } else {\r\n    //telling function how to format data. See \"graphLabels.js\"\r\n    dataStructure = graphLabels[`${indexBy}`].structure.map(item => item);\r\n    //when cross-filtering and index is Not \"Most Requested\"\r\n    if (crossFilter !== \"\") {\r\n      data = removeMultiple(data)\r\n      return setCrossedItems(data, dataStructure, crossFilter, indexBy, additionalFilter);\r\n    } else {\r\n      //when single filtering with index that is not \"Most Requested\"\r\n      data = removeMultiple(data)\r\n      return setItem(data, dataStructure, indexBy);\r\n    }\r\n  }\r\n} catch (error) {\r\n  alert(\"There was an error getting the data. This can happen if you select too many filters and there is no data for that subset. The page will automatically refresh.\")\r\n  window.location.reload()\r\n}\r\n};\r\n\r\nconst setCrossedItems = (data, dataStructure, crossFilter, indexBy, additionalFilter) => {\r\n  //will be used to store all possible values for the index value, which is referring to a column in the database table\r\n  let indexByValues = [];\r\n  //will be used to store all possible values for the cross filter value, which is referring to a column in the database table\r\n  let crossFilterValues = [];\r\n  //will be used to store array of objects, where the key will be what is being cross filtered by / \"crossFilter\"\r\n  // and the value is every possible value for that cross filter in the database\r\n  let crossFilterKeys = [];\r\n\r\n  // IF NOT A \"MOST REQUESTED\" GRAPH, SETS THE KEYS IN A PREDETERMINED ORDER BASED ON WHAT ORDER LANCE WANTS THEM IN\r\n  // OTHERWISE IT IS GOING TO BE SORTED MOST TO LEAST REQUESTED AT A LATER TIME\r\n  if (graphLabels[`${crossFilter}`]) {\r\n    crossFilterKeys = graphLabels[`${crossFilter}`].structure;\r\n  } else {\r\n    crossFilterKeys = getIndex(data, crossFilter)\r\n  }\r\n\r\n  // Puts each value from key:value pair into an array\r\n  // ['Female', 'Male', null]\r\n  dataStructure.forEach(obj => indexByValues.push(Object.values(obj)[0]));\r\n  crossFilterKeys.forEach(obj =>\r\n    Object.values(obj)[0] !== null &&\r\n    crossFilterValues.push(Object.values(obj)[0])\r\n  );\r\n\r\n  // Building an array of objects where each object is formatted in this way\r\n  // ex: if indexBy = \"gender\" and crossFilter = \"age\"\r\n  // {\"gender\": \"Male\", \"10-20\": 167, \"20-30\": 237, \"30-40\": 642, \"40-50\": 210, \"50-60\": 123, \"60-70\": 1}\r\n  // There will be an object like this for each value of the indexByValues ex: [\"Male\", \"Female\"]\r\n  indexByValues.forEach((key, index) => {\r\n    const crossFilteredData = [];\r\n    const filtered = data.filter(trader => trader[`${indexBy}`] === key);\r\n    crossFilterValues.forEach((key, index) => {\r\n      const crossFiltered = filtered.filter(\r\n        trader => trader[`${crossFilter}`] === key\r\n      );\r\n      crossFilteredData.push({ [`${key}`]: crossFiltered.length });\r\n    })\r\n    crossFilteredData.forEach(obj => {\r\n      return (dataStructure[index] = {\r\n        ...dataStructure[index],\r\n        [`${Object.keys(obj)[0]}`]: [`${Object.values(obj)[0]}`][0]\r\n      })\r\n    })\r\n  });\r\n\r\n  //If graph is \"Most Requested\" sort from Most to Least requested and provide top 7 objects\r\n  let keyValueArrIndex = [];\r\n  let keyValueArrCross = [];\r\n  let newDataStructure = [];\r\n\r\n  if (!graphLabels[`${indexBy}`] && graphLabels[`${crossFilter}`]) {\r\n    dataStructure.map(obj => {\r\n      return keyValueArrIndex.push([\r\n        obj[`${indexBy}`],\r\n        Object.values(obj)\r\n          .slice(1)\r\n          .reduce((a, b) => a + b)\r\n      ]);\r\n    })\r\n    keyValueArrIndex = keyValueArrIndex.sort((a, b) => b[1] - a[1]).slice(0, 7);\r\n    keyValueArrIndex.forEach(arr => {\r\n      for (let i = 0, len = dataStructure.length; i < len; i++) {\r\n        if (arr[0] === dataStructure[i][`${indexBy}`]) {\r\n          newDataStructure.push(dataStructure[i]);\r\n        }\r\n      }\r\n    }\r\n    );\r\n    dataStructure = newDataStructure\r\n  };\r\n\r\n  if (!graphLabels[`${crossFilter}`] && graphLabels[`${indexBy}`]) {\r\n    dataStructure.forEach(obj => {\r\n      let crossKeys = Object.keys(obj);\r\n      let crossValues = Object.values(obj);\r\n      let tempCrossArr = [];\r\n      crossKeys.forEach((key, index) => {\r\n        tempCrossArr.push([key, crossValues[index]])\r\n      })\r\n      let slicedCrossArr = tempCrossArr.sort((a, b) => b[1] - a[1]).slice(0, 7)\r\n      crossFilterValues = []\r\n      slicedCrossArr.slice(1).forEach(arr => {\r\n        crossFilterValues.push(arr[0])\r\n      })\r\n      let tempObj = {};\r\n      slicedCrossArr.forEach(arr => {\r\n        tempObj = { ...tempObj, [arr[0]]: arr[1] }\r\n      })\r\n      newDataStructure.push(tempObj)\r\n    })\r\n    dataStructure = newDataStructure\r\n  };\r\n\r\n  if (!graphLabels[`${crossFilter}`] && !graphLabels[`${indexBy}`]) {\r\n    //commodityproduct: \"Maize\", \"KEN\": 123, \"RWA\": 200\r\n    //commodityproduct: \"Beans\", \"KEN\": 152, \"RWA\": 478\r\n    dataStructure.map(obj => {\r\n      if (obj[`${indexBy}`] !== null && obj[`${indexBy}`] !== undefined) {\r\n        return keyValueArrIndex.push([\r\n          obj[`${indexBy}`],\r\n          Object.values(obj)\r\n            .slice(1)\r\n            .reduce((a, b) => +a + +b)\r\n        ])\r\n      };\r\n    })\r\n    keyValueArrIndex = keyValueArrIndex.sort((a, b) => b[1] - a[1]).slice(0, 7);\r\n    console.log('keyvalArr', keyValueArrIndex)\r\n    keyValueArrIndex.forEach(arr => {\r\n      newDataStructure.push({ [indexBy]: arr[0] })\r\n    })\r\n    let topSeven = []\r\n    newDataStructure.forEach(item => {\r\n      topSeven.push(item[`${indexBy}`])\r\n    })\r\n    dataStructure = dataStructure.filter(obj => topSeven.includes(obj[`${indexBy}`]))\r\n    let keysToSort = Object.keys(dataStructure[0]).slice(1)\r\n    let tempObj = {}\r\n    keysToSort.forEach(item => {\r\n      return tempObj = { ...tempObj, [`${item}`]: 0 }\r\n    })\r\n    keysToSort = tempObj\r\n    dataStructure.forEach(obj => {\r\n      for (var key in obj) {\r\n        if (Number.isInteger(+obj[key]))\r\n          keysToSort[key] += Number(obj[key])\r\n      }\r\n    })\r\n\r\n    let crossKeys = Object.keys(keysToSort).filter(item => item !== undefined && item !== 'undefined');\r\n    let crossValues = Object.values(keysToSort);\r\n    let tempCrossArr = [];\r\n    crossKeys.forEach((key, index) => {\r\n      tempCrossArr.push([key, crossValues[index]])\r\n    })\r\n    let slicedCrossArr = tempCrossArr.sort((a, b) => b[1] - a[1]).slice(0, 7)\r\n    crossFilterValues = []\r\n    slicedCrossArr.forEach(arr => {\r\n      crossFilterValues.push(arr[0])\r\n    })\r\n    let temp = {};\r\n    slicedCrossArr.forEach(arr => {\r\n      temp = { ...temp, [arr[0]]: arr[1] }\r\n    })\r\n\r\n    keysToSort = temp\r\n\r\n    let keysToKeep = Object.keys(keysToSort)\r\n\r\n    //build on new ds from ds\r\n    dataStructure.forEach((obj, index) => {\r\n      let tempObject = { [indexBy]: obj[indexBy] }\r\n      for (var key in obj) {\r\n        if (keysToKeep.includes(key)) {\r\n          tempObject = { ...tempObject, [key]: obj[key] }\r\n        }\r\n      }\r\n      console.log('temp object tho', tempObject)\r\n      dataStructure[index] = tempObject\r\n    })\r\n\r\n    console.log('data structer what up', dataStructure)\r\n\r\n  }\r\n\r\n  /// KEYS TO SORT IS AN ARRAY OF OBJECTS YOU IDIOT\r\n\r\n\r\n  dataStructure = dataStructure.filter(obj => obj[`${indexBy}`] !== null);\r\n\r\n\r\n  // GET SAMPLE SIZE\r\n  // For each object, want to add up numbers skipping first key value pair, which is the index and will not have a number as value\r\n  //[{gender: \"Male\", \"10-20\": 200, \"20-30\": 150}, {gender: \"Female\", \"10-20\": 140, \"20-30\": 100}]\r\n  // add values where not indexing by\r\n  // {\"Male\": 350, \"Female\": 240}\r\n  let sampleArr = {};\r\n  dataStructure.map(item => {\r\n    let sampleSize = 0;\r\n\r\n    //[\"Male\", \"130\", \"100\", \"34\"]\r\n    let valuesArr = Object.values(item);\r\n    valuesArr.forEach(value => {\r\n      if (Number.isInteger(+value)) {\r\n        return sampleSize += Number(value);\r\n      };\r\n    });\r\n\r\n    return sampleArr = {\r\n      ...sampleArr,\r\n      [`${valuesArr[0]}`]: sampleSize\r\n    };\r\n  });\r\n\r\n  //This is the sampleSize of all responses {\"Male\": 153, \"Female\": 124 => totalSampleSize: 277}\r\n  let totalSampleSize = Object.values(sampleArr).reduce((a, b) => a + b);\r\n\r\n  //CHANGE VALUES TO PERCENTAGE OF SAMPLE SIZE\r\n  //[{gender: \"Male\", \"10-20\": 200, \"20-30\": 150},{gender: \"Female\", \"10-20\": 140, \"20-30\": 100}]\r\n\r\n  // dataStructure becomes data set for a csv file, and percentageData is for nivo chart.\r\n  let percentageData = dataStructure.map(obj => Object.assign({}, obj))\r\n\r\n  percentageData.forEach(obj => {\r\n    for (var property in obj) {\r\n      if (Number.isInteger(+obj[property])) {\r\n        obj[property] = +(\r\n          (obj[property] /\r\n            sampleArr[\r\n            obj[`${indexBy}`]\r\n            ]) *\r\n          100\r\n        ).toFixed(1);\r\n      }\r\n    }\r\n  });\r\n\r\n  // ABBREVIATE LABELS IF THERE ARE ANY TO ABBREVIATE (SEE BELOW)\r\n  abbreviateLabels(percentageData, indexBy);\r\n\r\n  const additionalFilterOptions = getIndex(data, additionalFilter)\r\n    .map(obj => Object.values(obj)[0])\r\n    .filter(str => str !== null)\r\n  \r\n\r\n\r\n\r\n  console.log('datastructure', dataStructure)\r\n  console.log('crossfiltervalues', crossFilterValues)\r\n  console.log('percentageData', percentageData)\r\n  return { dataStructure, crossFilterValues, indexBy, totalSampleSize, additionalFilterOptions, percentageData };\r\n};\r\n\r\n// Sets single filter index\r\n// Puts each value from key:value pair into an array\r\n// ['Female', 'Male', null]\r\nconst setItem = (data, dataStructure, indexBy) => {\r\n\r\n  let arr = [];\r\n  dataStructure.forEach(obj => arr.push(Object.values(obj)[0]));\r\n\r\n\r\n  // For each object get every trader at the index where it equals the value in the arr\r\n  arr.forEach((key, index) => {\r\n    const filtered = data.filter(trader => trader[`${indexBy}`] === key).length;\r\n    dataStructure[index] = {\r\n      ...dataStructure[index],\r\n      [`${arr[index]}`]: filtered\r\n    }\r\n  });\r\n\r\n  // This block of code transforms from raw numbers to rounded percentages\r\n  let numberValues = [];\r\n  let sampleSize = 0;\r\n\r\n  dataStructure.map(item => {\r\n    const keyValue = item[`${indexBy}`];\r\n    numberValues.push(Number(item[keyValue]));\r\n    return sampleSize += Number(item[keyValue]);\r\n  });\r\n\r\n  let percentageData = dataStructure.map(obj => Object.assign({}, obj))\r\n\r\n  percentageData.forEach(obj => {\r\n    const keyValue = obj[`${indexBy}`];\r\n    obj[keyValue] = ((obj[keyValue] / sampleSize) * 100).toFixed(1);\r\n  });\r\n\r\n  return {\r\n    dataStructure,\r\n    percentageData,\r\n    keys: graphLabels[`${indexBy}`].labels,\r\n    indexBy,\r\n    sampleSize\r\n  };\r\n};\r\n\r\n//Builds data for Nivo when single filtering by \"Most Requested\"\r\nconst getMostRequested = (data, dataStructure, indexBy) => {\r\n\r\n  let arr = [];\r\n\r\n  // Puts each value from key:value pair into an array\r\n  // ['Maize', 'Clothes', 'Bananas']\r\n  dataStructure.forEach(obj => arr.push(Object.values(obj)[0]));\r\n\r\n  // For each object get every trader at the index where it equals the value in the arr\r\n  arr.forEach((key, index) => {\r\n    const filtered = data.filter(value => value[`${indexBy}`] === key)\r\n      .length;\r\n\r\n\r\n    dataStructure[index] = {\r\n      ...dataStructure[index],\r\n      [`${arr[index]}`]: filtered\r\n    };\r\n  });\r\n\r\n  dataStructure = dataStructure.filter(obj =>\r\n    obj[`${indexBy}`] !== null\r\n  );\r\n\r\n  // This block of code transforms from raw numbers to percentages\r\n  let sampleSize = 0;\r\n\r\n  dataStructure.map(item => {\r\n    let keyValue = item[`${indexBy}`];\r\n    return sampleSize += Number(item[keyValue]);\r\n  });\r\n  const csvKeys = dataStructure.map(obj => obj[`${indexBy}`]);\r\n  let percentageData = dataStructure.map(obj => Object.assign({}, obj));\r\n\r\n  percentageData.forEach(obj => {\r\n    const keyValue = obj[`${indexBy}`];\r\n    obj[keyValue] = ((obj[keyValue] / sampleSize) * 100)\r\n  });\r\n\r\n  // dataStructure used for csv, percentage for graph\r\n  percentageData = percentageData.sort((a, b) => Object.values(a)[1] > Object.values(b)[1] ? -1 : 1);\r\n  dataStructure = dataStructure.sort((a, b) => Object.values(a)[1] > Object.values(b)[1] ? -1 : 1);\r\n\r\n\r\n  let combinedNondisplayedEntries = percentageData.slice(6, percentageData.length - 1);\r\n  let count = 0;\r\n\r\n  combinedNondisplayedEntries.forEach(obj => {\r\n    let tempVar = obj[`${indexBy}`]\r\n    count += +obj[tempVar]\r\n  })\r\n\r\n  percentageData = percentageData.slice(0, 6)\r\n  \r\n  percentageData.forEach(obj => {\r\n    let tempVar = obj[`${indexBy}`]\r\n    obj[tempVar] = obj[tempVar].toFixed(0)\r\n  });\r\n  \r\n  percentageData.push({ [indexBy]: \"Other\", \"Other\": count.toFixed(0) })\r\n\r\n  const keys = percentageData.map(obj => obj[`${indexBy}`]);\r\n\r\n  //Function abbreviates graph labels\r\n  if (\r\n    indexBy === \"procedurerelevantagency\" ||\r\n    indexBy === \"procedurerequireddocument\" ||\r\n    indexBy === \"procedurecommodity\" ||\r\n    indexBy === \"procedureorigin\"\r\n  ) {\r\n    abbreviateLabels(percentageData, indexBy);\r\n  }\r\n\r\n  return { dataStructure, keys: keys.reverse(), csvKeys, indexBy, sampleSize, percentageData };\r\n};\r\n\r\n//This function is invoked when filtering by certain categories where the keys may be too long for Nivo to display\r\nconst abbreviateLabels = (dataStructure, indexBy) => {\r\n  let replaceValues = {\r\n    //Agencies\r\n    \"Ministry of Agriculture Animal Industry & Fisheries (MAAIF)\": \"MAAIF\",\r\n    \"Kenya Revenue Authority (KRA)\": \"KRA\",\r\n    \"COMESA Trade Information Desk Office (TIDO)\": \"TIDO\",\r\n    \"Uganda National Bureau of Standards (UNBS)\": \"UNBS\",\r\n    \"PORT Health\": \"PORT Health\",\r\n    \"Kenya Plant Health Inspectorate Service (KEPHIS)\": \"KEPHIS\",\r\n    \"Uganda Revenue Authority (URA)\": \"URA\",\r\n    \"Kenya Bureau of Standards (KEBS)\": \"KEBS\",\r\n    \"National Biosafety Authority (NBA)\": \"NBA\",\r\n    \"Kenya National Chamber of Commerce & Industry (KNCCI)\": \"KNCCI\",\r\n    \"Clearing Agent\": \"Clearing Agent\",\r\n    \"Uganda Police Dpts\": \"UPD\",\r\n    //Documents\r\n    \"Import Permit\": \"Import Permit\",\r\n    \"Valid Invoice\": \"Valid Invoice\",\r\n    \"Simplified Certificate Of Origin (SCOO)\": \"SCOO\",\r\n    \"National ID Card/Passport\": \"Passport/ID\",\r\n    \"Yellow Fever Card\": \"YF Card\",\r\n    \"Certificate of Origin\": \"Cert of Origin\",\r\n    \"Phytosanitary Certificate\": \"Phyto Cert\",\r\n    \"Import Entry Declaration Form (SAD)\": \"SAD\",\r\n    \"Fumigation Certificate\": \"Fumigation Cert\",\r\n    \"Bill of Lading\": \"Bill of Lading\",\r\n    //Procedure Commodity\r\n    \"Clothes and Shoes (New)\": \"Clothes/Shoes (New)\",\r\n    \"Clothes and Shoes (Used)\": \"Clothes/Shoes (Used)\",\r\n    //\r\n    OutsideEAC: \"Outside EAC\"\r\n  };\r\n  dataStructure.forEach(obj => {\r\n    let longValue = obj[`${indexBy}`];\r\n    if (replaceValues[`${longValue}`]) {\r\n      obj[`${indexBy}`] = replaceValues[`${longValue}`];\r\n    }\r\n  });\r\n\r\n  return dataStructure;\r\n};\r\n\r\nconst filterByDate = (data, startDate, endDate) => {\r\n  console.log(startDate, endDate)\r\n  startDate = startDate.replace(/-/g, \"\");\r\n  endDate = endDate.replace(/-/g, \"\");\r\n\r\n\r\n  const filteredData = data.filter(obj => {\r\n    const objectDate = +obj.created_date.split(\"T\")[0].replace(/-/g, \"\");\r\n    return objectDate > startDate && objectDate < endDate;\r\n  });\r\n\r\n  return filteredData;\r\n};\r\n\r\nexport default dataParse;\r\n"]},"metadata":{},"sourceType":"module"}