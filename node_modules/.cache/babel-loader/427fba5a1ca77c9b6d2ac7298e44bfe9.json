{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\mesty\\\\Lambda\\\\Forked-Lambda-Copies\\\\labs 19\\\\sauti-databank-fe\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport identity from \"./identity.js\";\nexport default function group(values) {\n  for (var _len = arguments.length, keys = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    keys[_key - 1] = arguments[_key];\n  }\n\n  return nest(values, identity, identity, keys);\n}\nexport function groups(values) {\n  for (var _len2 = arguments.length, keys = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    keys[_key2 - 1] = arguments[_key2];\n  }\n\n  return nest(values, Array.from, identity, keys);\n}\nexport function rollup(values, reduce) {\n  for (var _len3 = arguments.length, keys = new Array(_len3 > 2 ? _len3 - 2 : 0), _key3 = 2; _key3 < _len3; _key3++) {\n    keys[_key3 - 2] = arguments[_key3];\n  }\n\n  return nest(values, identity, reduce, keys);\n}\nexport function rollups(values, reduce) {\n  for (var _len4 = arguments.length, keys = new Array(_len4 > 2 ? _len4 - 2 : 0), _key4 = 2; _key4 < _len4; _key4++) {\n    keys[_key4 - 2] = arguments[_key4];\n  }\n\n  return nest(values, Array.from, reduce, keys);\n}\n\nfunction nest(values, map, reduce, keys) {\n  return function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    var groups = new Map();\n    var keyof = keys[i++];\n    var index = -1;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = values[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var value = _step.value;\n        var key = keyof(value, ++index, values);\n\n        var _group = groups.get(key);\n\n        if (_group) _group.push(value);else groups.set(key, [value]);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator[\"return\"] != null) {\n          _iterator[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = groups[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var _step2$value = _slicedToArray(_step2.value, 2),\n            _key5 = _step2$value[0],\n            _values = _step2$value[1];\n\n        groups.set(_key5, regroup(_values, i));\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2[\"return\"] != null) {\n          _iterator2[\"return\"]();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    return map(groups);\n  }(values, 0);\n}","map":{"version":3,"sources":["C:/Users/mesty/Lambda/Forked-Lambda-Copies/labs 19/sauti-databank-fe/node_modules/d3-array/src/group.js"],"names":["identity","group","values","keys","nest","groups","Array","from","rollup","reduce","rollups","map","regroup","i","length","Map","keyof","index","value","key","get","push","set"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,eAArB;AAEA,eAAe,SAASC,KAAT,CAAeC,MAAf,EAAgC;AAAA,oCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC7C,SAAOC,IAAI,CAACF,MAAD,EAASF,QAAT,EAAmBA,QAAnB,EAA6BG,IAA7B,CAAX;AACD;AAED,OAAO,SAASE,MAAT,CAAgBH,MAAhB,EAAiC;AAAA,qCAANC,IAAM;AAANA,IAAAA,IAAM;AAAA;;AACtC,SAAOC,IAAI,CAACF,MAAD,EAASI,KAAK,CAACC,IAAf,EAAqBP,QAArB,EAA+BG,IAA/B,CAAX;AACD;AAED,OAAO,SAASK,MAAT,CAAgBN,MAAhB,EAAwBO,MAAxB,EAAyC;AAAA,qCAANN,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC9C,SAAOC,IAAI,CAACF,MAAD,EAASF,QAAT,EAAmBS,MAAnB,EAA2BN,IAA3B,CAAX;AACD;AAED,OAAO,SAASO,OAAT,CAAiBR,MAAjB,EAAyBO,MAAzB,EAA0C;AAAA,qCAANN,IAAM;AAANA,IAAAA,IAAM;AAAA;;AAC/C,SAAOC,IAAI,CAACF,MAAD,EAASI,KAAK,CAACC,IAAf,EAAqBE,MAArB,EAA6BN,IAA7B,CAAX;AACD;;AAED,SAASC,IAAT,CAAcF,MAAd,EAAsBS,GAAtB,EAA2BF,MAA3B,EAAmCN,IAAnC,EAAyC;AACvC,SAAQ,SAASS,OAAT,CAAiBV,MAAjB,EAAyBW,CAAzB,EAA4B;AAClC,QAAIA,CAAC,IAAIV,IAAI,CAACW,MAAd,EAAsB,OAAOL,MAAM,CAACP,MAAD,CAAb;AACtB,QAAMG,MAAM,GAAG,IAAIU,GAAJ,EAAf;AACA,QAAMC,KAAK,GAAGb,IAAI,CAACU,CAAC,EAAF,CAAlB;AACA,QAAII,KAAK,GAAG,CAAC,CAAb;AAJkC;AAAA;AAAA;;AAAA;AAKlC,2BAAoBf,MAApB,8HAA4B;AAAA,YAAjBgB,KAAiB;AAC1B,YAAMC,GAAG,GAAGH,KAAK,CAACE,KAAD,EAAQ,EAAED,KAAV,EAAiBf,MAAjB,CAAjB;;AACA,YAAMD,MAAK,GAAGI,MAAM,CAACe,GAAP,CAAWD,GAAX,CAAd;;AACA,YAAIlB,MAAJ,EAAWA,MAAK,CAACoB,IAAN,CAAWH,KAAX,EAAX,KACKb,MAAM,CAACiB,GAAP,CAAWH,GAAX,EAAgB,CAACD,KAAD,CAAhB;AACN;AAViC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAWlC,4BAA4Bb,MAA5B,mIAAoC;AAAA;AAAA,YAAxBc,KAAwB;AAAA,YAAnBjB,OAAmB;;AAClCG,QAAAA,MAAM,CAACiB,GAAP,CAAWH,KAAX,EAAgBP,OAAO,CAACV,OAAD,EAASW,CAAT,CAAvB;AACD;AAbiC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAclC,WAAOF,GAAG,CAACN,MAAD,CAAV;AACD,GAfM,CAeJH,MAfI,EAeI,CAfJ,CAAP;AAgBD","sourcesContent":["import identity from \"./identity.js\";\n\nexport default function group(values, ...keys) {\n  return nest(values, identity, identity, keys);\n}\n\nexport function groups(values, ...keys) {\n  return nest(values, Array.from, identity, keys);\n}\n\nexport function rollup(values, reduce, ...keys) {\n  return nest(values, identity, reduce, keys);\n}\n\nexport function rollups(values, reduce, ...keys) {\n  return nest(values, Array.from, reduce, keys);\n}\n\nfunction nest(values, map, reduce, keys) {\n  return (function regroup(values, i) {\n    if (i >= keys.length) return reduce(values);\n    const groups = new Map();\n    const keyof = keys[i++];\n    let index = -1;\n    for (const value of values) {\n      const key = keyof(value, ++index, values);\n      const group = groups.get(key);\n      if (group) group.push(value);\n      else groups.set(key, [value]);\n    }\n    for (const [key, values] of groups) {\n      groups.set(key, regroup(values, i));\n    }\n    return map(groups);\n  })(values, 0);\n}\n"]},"metadata":{},"sourceType":"module"}