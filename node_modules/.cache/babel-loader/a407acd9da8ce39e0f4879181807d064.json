{"ast":null,"code":"// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\nexport default function (x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n\n  var i,\n      coefficient = x.slice(0, i); // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n\n  return [coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient, +x.slice(i + 1)];\n}","map":{"version":3,"sources":["C:/Users/mesty/Lambda/Forked-Lambda-Copies/labs 19/sauti-databank-fe/node_modules/d3-format/src/formatDecimal.js"],"names":["x","p","i","toExponential","indexOf","coefficient","slice","length"],"mappings":"AAAA;AACA;AACA;AACA,eAAe,UAASA,CAAT,EAAYC,CAAZ,EAAe;AAC5B,MAAI,CAACC,CAAC,GAAG,CAACF,CAAC,GAAGC,CAAC,GAAGD,CAAC,CAACG,aAAF,CAAgBF,CAAC,GAAG,CAApB,CAAH,GAA4BD,CAAC,CAACG,aAAF,EAAlC,EAAqDC,OAArD,CAA6D,GAA7D,CAAL,IAA0E,CAA9E,EAAiF,OAAO,IAAP,CADrD,CACkE;;AAC9F,MAAIF,CAAJ;AAAA,MAAOG,WAAW,GAAGL,CAAC,CAACM,KAAF,CAAQ,CAAR,EAAWJ,CAAX,CAArB,CAF4B,CAI5B;AACA;;AACA,SAAO,CACLG,WAAW,CAACE,MAAZ,GAAqB,CAArB,GAAyBF,WAAW,CAAC,CAAD,CAAX,GAAiBA,WAAW,CAACC,KAAZ,CAAkB,CAAlB,CAA1C,GAAiED,WAD5D,EAEL,CAACL,CAAC,CAACM,KAAF,CAAQJ,CAAC,GAAG,CAAZ,CAFI,CAAP;AAID","sourcesContent":["// Computes the decimal coefficient and exponent of the specified number x with\n// significant digits p, where x is positive and p is in [1, 21] or undefined.\n// For example, formatDecimal(1.23) returns [\"123\", 0].\nexport default function(x, p) {\n  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf(\"e\")) < 0) return null; // NaN, ±Infinity\n  var i, coefficient = x.slice(0, i);\n\n  // The string returned by toExponential either has the form \\d\\.\\d+e[-+]\\d+\n  // (e.g., 1.2e+3) or the form \\de[-+]\\d+ (e.g., 1e+3).\n  return [\n    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,\n    +x.slice(i + 1)\n  ];\n}\n"]},"metadata":{},"sourceType":"module"}