{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"C:\\\\Users\\\\mesty\\\\Lambda\\\\Forked-Lambda-Copies\\\\labs 19\\\\sauti-databank-fe\\\\node_modules\\\\@babel\\\\runtime/helpers/slicedToArray\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\mesty\\\\Lambda\\\\Forked-Lambda-Copies\\\\labs 19\\\\sauti-databank-fe\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread2\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\mesty\\\\Lambda\\\\Forked-Lambda-Copies\\\\labs 19\\\\sauti-databank-fe\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar ansiStyles = require('ansi-styles');\n\nvar _require = require('supports-color'),\n    stdoutColor = _require.stdout,\n    stderrColor = _require.stderr;\n\nvar _require2 = require('./util'),\n    stringReplaceAll = _require2.stringReplaceAll,\n    stringEncaseCRLFWithFirstIndex = _require2.stringEncaseCRLFWithFirstIndex; // `supportsColor.level` â†’ `ansiStyles.color[name]` mapping\n\n\nvar levelMapping = ['ansi', 'ansi', 'ansi256', 'ansi16m'];\nvar styles = Object.create(null);\n\nvar applyOptions = function applyOptions(object) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (options.level > 3 || options.level < 0) {\n    throw new Error('The `level` option should be an integer from 0 to 3');\n  } // Detect level if not set manually\n\n\n  var colorLevel = stdoutColor ? stdoutColor.level : 0;\n  object.level = options.level === undefined ? colorLevel : options.level;\n};\n\nvar ChalkClass = function ChalkClass(options) {\n  _classCallCheck(this, ChalkClass);\n\n  return chalkFactory(options);\n};\n\nvar chalkFactory = function chalkFactory(options) {\n  var chalk = {};\n  applyOptions(chalk, options);\n\n  chalk.template = function () {\n    for (var _len = arguments.length, arguments_ = new Array(_len), _key = 0; _key < _len; _key++) {\n      arguments_[_key] = arguments[_key];\n    }\n\n    return chalkTag.apply(void 0, [chalk.template].concat(arguments_));\n  };\n\n  Object.setPrototypeOf(chalk, Chalk.prototype);\n  Object.setPrototypeOf(chalk.template, chalk);\n\n  chalk.template.constructor = function () {\n    throw new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');\n  };\n\n  chalk.template.Instance = ChalkClass;\n  return chalk.template;\n};\n\nfunction Chalk(options) {\n  return chalkFactory(options);\n}\n\nvar _loop = function _loop() {\n  var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n      styleName = _Object$entries$_i[0],\n      style = _Object$entries$_i[1];\n\n  styles[styleName] = {\n    get: function get() {\n      var builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);\n      Object.defineProperty(this, styleName, {\n        value: builder\n      });\n      return builder;\n    }\n  };\n};\n\nfor (var _i = 0, _Object$entries = Object.entries(ansiStyles); _i < _Object$entries.length; _i++) {\n  _loop();\n}\n\nstyles.visible = {\n  get: function get() {\n    var builder = createBuilder(this, this._styler, true);\n    Object.defineProperty(this, 'visible', {\n      value: builder\n    });\n    return builder;\n  }\n};\nvar usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];\n\nvar _loop2 = function _loop2() {\n  var model = _usedModels[_i2];\n  styles[model] = {\n    get: function get() {\n      var level = this.level;\n      return function () {\n        var _ansiStyles$color$lev;\n\n        var styler = createStyler((_ansiStyles$color$lev = ansiStyles.color[levelMapping[level]])[model].apply(_ansiStyles$color$lev, arguments), ansiStyles.color.close, this._styler);\n        return createBuilder(this, styler, this._isEmpty);\n      };\n    }\n  };\n};\n\nfor (var _i2 = 0, _usedModels = usedModels; _i2 < _usedModels.length; _i2++) {\n  _loop2();\n}\n\nvar _loop3 = function _loop3() {\n  var model = _usedModels2[_i3];\n  var bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n  styles[bgModel] = {\n    get: function get() {\n      var level = this.level;\n      return function () {\n        var _ansiStyles$bgColor$l;\n\n        var styler = createStyler((_ansiStyles$bgColor$l = ansiStyles.bgColor[levelMapping[level]])[model].apply(_ansiStyles$bgColor$l, arguments), ansiStyles.bgColor.close, this._styler);\n        return createBuilder(this, styler, this._isEmpty);\n      };\n    }\n  };\n};\n\nfor (var _i3 = 0, _usedModels2 = usedModels; _i3 < _usedModels2.length; _i3++) {\n  _loop3();\n}\n\nvar proto = Object.defineProperties(function () {}, _objectSpread({}, styles, {\n  level: {\n    enumerable: true,\n    get: function get() {\n      return this._generator.level;\n    },\n    set: function set(level) {\n      this._generator.level = level;\n    }\n  }\n}));\n\nvar createStyler = function createStyler(open, close, parent) {\n  var openAll;\n  var closeAll;\n\n  if (parent === undefined) {\n    openAll = open;\n    closeAll = close;\n  } else {\n    openAll = parent.openAll + open;\n    closeAll = close + parent.closeAll;\n  }\n\n  return {\n    open: open,\n    close: close,\n    openAll: openAll,\n    closeAll: closeAll,\n    parent: parent\n  };\n};\n\nvar createBuilder = function createBuilder(self, _styler, _isEmpty) {\n  var builder = function builder() {\n    for (var _len2 = arguments.length, arguments_ = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      arguments_[_key2] = arguments[_key2];\n    }\n\n    // Single argument is hot path, implicit coercion is faster than anything\n    // eslint-disable-next-line no-implicit-coercion\n    return applyStyle(builder, arguments_.length === 1 ? '' + arguments_[0] : arguments_.join(' '));\n  }; // `__proto__` is used because we must return a function, but there is\n  // no way to create a function with a different prototype\n\n\n  builder.__proto__ = proto; // eslint-disable-line no-proto\n\n  builder._generator = self;\n  builder._styler = _styler;\n  builder._isEmpty = _isEmpty;\n  return builder;\n};\n\nvar applyStyle = function applyStyle(self, string) {\n  if (self.level <= 0 || !string) {\n    return self._isEmpty ? '' : string;\n  }\n\n  var styler = self._styler;\n\n  if (styler === undefined) {\n    return string;\n  }\n\n  var _styler2 = styler,\n      openAll = _styler2.openAll,\n      closeAll = _styler2.closeAll;\n\n  if (string.indexOf(\"\\x1B\") !== -1) {\n    while (styler !== undefined) {\n      // Replace any instances already present with a re-opening code\n      // otherwise only the part of the string until said closing code\n      // will be colored, and the rest will simply be 'plain'.\n      string = stringReplaceAll(string, styler.close, styler.open);\n      styler = styler.parent;\n    }\n  } // We can move both next actions out of loop, because remaining actions in loop won't have\n  // any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n  // after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n\n\n  var lfIndex = string.indexOf('\\n');\n\n  if (lfIndex !== -1) {\n    string = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n  }\n\n  return openAll + string + closeAll;\n};\n\nvar template;\n\nvar chalkTag = function chalkTag(chalk) {\n  for (var _len3 = arguments.length, strings = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n    strings[_key3 - 1] = arguments[_key3];\n  }\n\n  var firstString = strings[0];\n\n  if (!Array.isArray(firstString)) {\n    // If chalk() was called by itself or with a string,\n    // return the string itself as a string.\n    return strings.join(' ');\n  }\n\n  var arguments_ = strings.slice(1);\n  var parts = [firstString.raw[0]];\n\n  for (var i = 1; i < firstString.length; i++) {\n    parts.push(String(arguments_[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'), String(firstString.raw[i]));\n  }\n\n  if (template === undefined) {\n    template = require('./templates');\n  }\n\n  return template(chalk, parts.join(''));\n};\n\nObject.defineProperties(Chalk.prototype, styles);\nvar chalk = Chalk(); // eslint-disable-line new-cap\n\nchalk.supportsColor = stdoutColor;\nchalk.stderr = Chalk({\n  level: stderrColor ? stderrColor.level : 0\n}); // eslint-disable-line new-cap\n\nchalk.stderr.supportsColor = stderrColor; // For TypeScript\n\nchalk.Level = {\n  None: 0,\n  Basic: 1,\n  Ansi256: 2,\n  TrueColor: 3,\n  0: 'None',\n  1: 'Basic',\n  2: 'Ansi256',\n  3: 'TrueColor'\n};\nmodule.exports = chalk;","map":{"version":3,"sources":["C:/Users/mesty/Lambda/Forked-Lambda-Copies/labs 19/sauti-databank-fe/node_modules/react-dev-utils/node_modules/chalk/source/index.js"],"names":["ansiStyles","require","stdoutColor","stdout","stderrColor","stderr","stringReplaceAll","stringEncaseCRLFWithFirstIndex","levelMapping","styles","Object","create","applyOptions","object","options","level","Error","colorLevel","undefined","ChalkClass","chalkFactory","chalk","template","arguments_","chalkTag","setPrototypeOf","Chalk","prototype","constructor","Instance","styleName","style","get","builder","createBuilder","createStyler","open","close","_styler","_isEmpty","defineProperty","value","entries","visible","usedModels","model","styler","color","bgModel","toUpperCase","slice","bgColor","proto","defineProperties","enumerable","_generator","set","parent","openAll","closeAll","self","applyStyle","length","join","__proto__","string","indexOf","lfIndex","strings","firstString","Array","isArray","parts","raw","i","push","String","replace","supportsColor","Level","None","Basic","Ansi256","TrueColor","module","exports"],"mappings":"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","sourcesContent":["'use strict';\nconst ansiStyles = require('ansi-styles');\nconst {stdout: stdoutColor, stderr: stderrColor} = require('supports-color');\nconst {\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex\n} = require('./util');\n\n// `supportsColor.level` â†’ `ansiStyles.color[name]` mapping\nconst levelMapping = [\n\t'ansi',\n\t'ansi',\n\t'ansi256',\n\t'ansi16m'\n];\n\nconst styles = Object.create(null);\n\nconst applyOptions = (object, options = {}) => {\n\tif (options.level > 3 || options.level < 0) {\n\t\tthrow new Error('The `level` option should be an integer from 0 to 3');\n\t}\n\n\t// Detect level if not set manually\n\tconst colorLevel = stdoutColor ? stdoutColor.level : 0;\n\tobject.level = options.level === undefined ? colorLevel : options.level;\n};\n\nclass ChalkClass {\n\tconstructor(options) {\n\t\treturn chalkFactory(options);\n\t}\n}\n\nconst chalkFactory = options => {\n\tconst chalk = {};\n\tapplyOptions(chalk, options);\n\n\tchalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);\n\n\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\tObject.setPrototypeOf(chalk.template, chalk);\n\n\tchalk.template.constructor = () => {\n\t\tthrow new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');\n\t};\n\n\tchalk.template.Instance = ChalkClass;\n\n\treturn chalk.template;\n};\n\nfunction Chalk(options) {\n\treturn chalkFactory(options);\n}\n\nfor (const [styleName, style] of Object.entries(ansiStyles)) {\n\tstyles[styleName] = {\n\t\tget() {\n\t\t\tconst builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);\n\t\t\tObject.defineProperty(this, styleName, {value: builder});\n\t\t\treturn builder;\n\t\t}\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\tconst builder = createBuilder(this, this._styler, true);\n\t\tObject.defineProperty(this, 'visible', {value: builder});\n\t\treturn builder;\n\t}\n};\n\nconst usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];\n\nfor (const model of usedModels) {\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);\n\t\t\t\treturn createBuilder(this, styler, this._isEmpty);\n\t\t\t};\n\t\t}\n\t};\n}\n\nfor (const model of usedModels) {\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);\n\t\t\t\treturn createBuilder(this, styler, this._isEmpty);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, {\n\t...styles,\n\tlevel: {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn this._generator.level;\n\t\t},\n\t\tset(level) {\n\t\t\tthis._generator.level = level;\n\t\t}\n\t}\n});\n\nconst createStyler = (open, close, parent) => {\n\tlet openAll;\n\tlet closeAll;\n\tif (parent === undefined) {\n\t\topenAll = open;\n\t\tcloseAll = close;\n\t} else {\n\t\topenAll = parent.openAll + open;\n\t\tcloseAll = close + parent.closeAll;\n\t}\n\n\treturn {\n\t\topen,\n\t\tclose,\n\t\topenAll,\n\t\tcloseAll,\n\t\tparent\n\t};\n};\n\nconst createBuilder = (self, _styler, _isEmpty) => {\n\tconst builder = (...arguments_) => {\n\t\t// Single argument is hot path, implicit coercion is faster than anything\n\t\t// eslint-disable-next-line no-implicit-coercion\n\t\treturn applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));\n\t};\n\n\t// `__proto__` is used because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tbuilder.__proto__ = proto; // eslint-disable-line no-proto\n\n\tbuilder._generator = self;\n\tbuilder._styler = _styler;\n\tbuilder._isEmpty = _isEmpty;\n\n\treturn builder;\n};\n\nconst applyStyle = (self, string) => {\n\tif (self.level <= 0 || !string) {\n\t\treturn self._isEmpty ? '' : string;\n\t}\n\n\tlet styler = self._styler;\n\n\tif (styler === undefined) {\n\t\treturn string;\n\t}\n\n\tconst {openAll, closeAll} = styler;\n\tif (string.indexOf('\\u001B') !== -1) {\n\t\twhile (styler !== undefined) {\n\t\t\t// Replace any instances already present with a re-opening code\n\t\t\t// otherwise only the part of the string until said closing code\n\t\t\t// will be colored, and the rest will simply be 'plain'.\n\t\t\tstring = stringReplaceAll(string, styler.close, styler.open);\n\n\t\t\tstyler = styler.parent;\n\t\t}\n\t}\n\n\t// We can move both next actions out of loop, because remaining actions in loop won't have\n\t// any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n\t// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n\tconst lfIndex = string.indexOf('\\n');\n\tif (lfIndex !== -1) {\n\t\tstring = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n\t}\n\n\treturn openAll + string + closeAll;\n};\n\nlet template;\nconst chalkTag = (chalk, ...strings) => {\n\tconst [firstString] = strings;\n\n\tif (!Array.isArray(firstString)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn strings.join(' ');\n\t}\n\n\tconst arguments_ = strings.slice(1);\n\tconst parts = [firstString.raw[0]];\n\n\tfor (let i = 1; i < firstString.length; i++) {\n\t\tparts.push(\n\t\t\tString(arguments_[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'),\n\t\t\tString(firstString.raw[i])\n\t\t);\n\t}\n\n\tif (template === undefined) {\n\t\ttemplate = require('./templates');\n\t}\n\n\treturn template(chalk, parts.join(''));\n};\n\nObject.defineProperties(Chalk.prototype, styles);\n\nconst chalk = Chalk(); // eslint-disable-line new-cap\nchalk.supportsColor = stdoutColor;\nchalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0}); // eslint-disable-line new-cap\nchalk.stderr.supportsColor = stderrColor;\n\n// For TypeScript\nchalk.Level = {\n\tNone: 0,\n\tBasic: 1,\n\tAnsi256: 2,\n\tTrueColor: 3,\n\t0: 'None',\n\t1: 'Basic',\n\t2: 'Ansi256',\n\t3: 'TrueColor'\n};\n\nmodule.exports = chalk;\n"]},"metadata":{},"sourceType":"script"}