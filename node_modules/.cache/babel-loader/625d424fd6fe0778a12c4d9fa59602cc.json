{"ast":null,"code":"export { ApolloConsumer, ApolloProvider, getApolloContext, resetApolloContext } from '@apollo/react-common';\nimport { __rest } from 'tslib';\nimport { useQuery, useMutation, useSubscription } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nfunction Query(props) {\n  var children = props.children,\n      query = props.query,\n      options = __rest(props, [\"children\", \"query\"]);\n\n  var result = useQuery(query, options);\n  return children && result ? children(result) : null;\n}\n\n(function (Query) {\n  Query.propTypes = {\n    client: PropTypes.object,\n    children: PropTypes.func.isRequired,\n    fetchPolicy: PropTypes.string,\n    notifyOnNetworkStatusChange: PropTypes.bool,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    pollInterval: PropTypes.number,\n    query: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    ssr: PropTypes.bool,\n    partialRefetch: PropTypes.bool,\n    returnPartialData: PropTypes.bool\n  };\n})(Query || (Query = {}));\n\nfunction Mutation(props) {\n  var _a = useMutation(props.mutation, props),\n      runMutation = _a[0],\n      result = _a[1];\n\n  return props.children ? props.children(runMutation, result) : null;\n}\n\n(function (Mutation) {\n  Mutation.propTypes = {\n    mutation: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    refetchQueries: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.string, PropTypes.object])), PropTypes.func]),\n    awaitRefetchQueries: PropTypes.bool,\n    update: PropTypes.func,\n    children: PropTypes.func.isRequired,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    fetchPolicy: PropTypes.string\n  };\n})(Mutation || (Mutation = {}));\n\nfunction Subscription(props) {\n  var result = useSubscription(props.subscription, props);\n  return props.children && result ? props.children(result) : null;\n}\n\n(function (Subscription) {\n  Subscription.propTypes = {\n    subscription: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    children: PropTypes.func,\n    onSubscriptionData: PropTypes.func,\n    onSubscriptionComplete: PropTypes.func,\n    shouldResubscribe: PropTypes.oneOfType([PropTypes.func, PropTypes.bool])\n  };\n})(Subscription || (Subscription = {}));\n\nexport { Mutation, Query, Subscription };","map":{"version":3,"sources":["../src/Query.tsx","../src/Mutation.tsx","../src/Subscription.tsx"],"names":[],"mappings":"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","sourcesContent":["import { OperationVariables } from '@apollo/react-common';\nimport { useQuery } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { QueryComponentOptions } from './types';\n\nexport function Query<TData = any, TVariables = OperationVariables>(\n  props: QueryComponentOptions<TData, TVariables>\n) {\n  const { children, query, ...options } = props;\n  const result = useQuery(query, options);\n  return children && result ? children(result) : null;\n}\n\nexport namespace Query {\n  export const propTypes = {\n    client: PropTypes.object,\n    children: PropTypes.func.isRequired,\n    fetchPolicy: PropTypes.string,\n    notifyOnNetworkStatusChange: PropTypes.bool,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    pollInterval: PropTypes.number,\n    query: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    ssr: PropTypes.bool,\n    partialRefetch: PropTypes.bool,\n    returnPartialData: PropTypes.bool\n  };\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { useMutation } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { MutationComponentOptions } from './types';\n\nexport function Mutation<TData = any, TVariables = OperationVariables>(\n  props: MutationComponentOptions<TData, TVariables>\n) {\n  const [runMutation, result] = useMutation(props.mutation, props);\n  return props.children ? props.children(runMutation, result) : null;\n}\n\nexport namespace Mutation {\n  export const propTypes = {\n    mutation: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    optimisticResponse: PropTypes.oneOfType([PropTypes.object, PropTypes.func]),\n    refetchQueries: PropTypes.oneOfType([\n      PropTypes.arrayOf(\n        PropTypes.oneOfType([PropTypes.string, PropTypes.object])\n      ),\n      PropTypes.func\n    ]),\n    awaitRefetchQueries: PropTypes.bool,\n    update: PropTypes.func,\n    children: PropTypes.func.isRequired,\n    onCompleted: PropTypes.func,\n    onError: PropTypes.func,\n    fetchPolicy: PropTypes.string\n  };\n}\n","import { OperationVariables } from '@apollo/react-common';\nimport { useSubscription } from '@apollo/react-hooks';\nimport PropTypes from 'prop-types';\n\nimport { SubscriptionComponentOptions } from './types';\n\nexport function Subscription<TData = any, TVariables = OperationVariables>(\n  props: SubscriptionComponentOptions<TData, TVariables>\n) {\n  const result = useSubscription(props.subscription, props);\n  return props.children && result ? props.children(result) : null;\n}\n\nexport namespace Subscription {\n  export const propTypes = {\n    subscription: PropTypes.object.isRequired,\n    variables: PropTypes.object,\n    children: PropTypes.func,\n    onSubscriptionData: PropTypes.func,\n    onSubscriptionComplete: PropTypes.func,\n    shouldResubscribe: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  };\n}\n"]},"metadata":{},"sourceType":"module"}