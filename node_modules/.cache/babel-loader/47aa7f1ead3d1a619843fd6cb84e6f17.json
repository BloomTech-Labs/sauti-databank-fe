{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\mesty\\\\Lambda\\\\Forked-Lambda-Copies\\\\labs 19\\\\sauti-databank-fe\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\mesty\\\\Lambda\\\\Forked-Lambda-Copies\\\\labs 19\\\\sauti-databank-fe\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _taggedTemplateLiteral from \"C:\\\\Users\\\\mesty\\\\Lambda\\\\Forked-Lambda-Copies\\\\labs 19\\\\sauti-databank-fe\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"C:\\\\Users\\\\mesty\\\\Lambda\\\\Forked-Lambda-Copies\\\\labs 19\\\\sauti-databank-fe\\\\src\\\\Components\\\\Queries.js\";\n\nfunction _templateObject6() {\n  var data = _taggedTemplateLiteral([\"\\n      query getData(\\n        $age: String,\\n        $gender: String, \\n        $education: String, \\n        $crossing_freq: String,\\n        $produce: String,\\n        $primary_income: String,\\n        $language: String,\\n        $country_of_residence: String,\\n        $procedurecommodity: String,\\n        $procedurecommoditycat: String,\\n        $proceduredest: String,\\n        $procedurerequireddocument: String,\\n        $procedurerelevantagency: String,\\n        $procedureorigin: String,\\n        $commoditycountry: String,\\n        $commoditymarket: String,\\n        $commodityproduct: String,\\n        $commoditycat: String,\\n        $exchangedirection: String,\\n        ){\\n        sessionsData(\\n          age: $age,\\n          gender: $gender, \\n          education: $education, \\n          crossing_freq: $crossing_freq,\\n          produce: $produce,\\n          primary_income: $primary_income,\\n          language: $language,\\n          country_of_residence: $country_of_residence,\\n          procedurecommodity: $procedurecommodity,\\n          procedurecommoditycat: $procedurecommoditycat,\\n          proceduredest: $proceduredest,\\n          procedurerequireddocument: $procedurerequireddocument,\\n          procedurerelevantagency: $procedurerelevantagency,\\n          procedureorigin: $procedureorigin,\\n          commoditycountry: $commoditycountry,\\n          commoditymarket: $commoditymarket,\\n          commodityproduct: $commodityproduct,\\n          commoditycat: $commoditycat,\\n          exchangedirection: $exchangedirection,\\n          ){\\n          \", \"\\n          \", \"\\n          created_date\\n        }\\n        additionalFilterData:sessionsData{\\n            \", \"\\n        }\\n      }\\n      \"]);\n\n  _templateObject6 = function _templateObject6() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject5() {\n  var data = _taggedTemplateLiteral([\"\\n      query getUsers( \\n        $age: String,\\n        $gender: String, \\n        $education: String \\n        $crossing_freq: String,\\n        $produce: String,\\n        $primary_income: String,\\n        $language: String,\\n        $country_of_residence: String,\\n        $procedurecommodity: String,\\n        $procedurecommoditycat: String,\\n        $proceduredest: String,\\n        $procedurerequireddocument: String,\\n        $procedurerelevantagency: String,\\n        $procedureorigin: String,\\n        $commoditycountry: String,\\n        $commoditymarket: String,\\n        $commodityproduct: String,\\n        $commoditycat: String,\\n        $exchangedirection: String,\\n        ){\\n        sessionsData (\\n          age: $age,\\n          gender: $gender, \\n          education: $education\\n          crossing_freq: $crossing_freq,\\n          produce: $produce,\\n          primary_income: $primary_income,\\n          language: $language,\\n          country_of_residence: $country_of_residence,\\n          procedurecommodity: $procedurecommodity,\\n          procedurecommoditycat: $procedurecommoditycat,\\n          proceduredest: $proceduredest,\\n          procedurerequireddocument: $procedurerequireddocument,\\n          procedurerelevantagency: $procedurerelevantagency,\\n          procedureorigin: $procedureorigin,\\n          commoditycountry: $commoditycountry,\\n          commoditymarket: $commoditymarket,\\n          commodityproduct: $commodityproduct,\\n          commoditycat: $commoditycat,\\n          exchangedirection: $exchangedirection,\\n          ) {\\n          \", \"\\n          \", \"\\n          created_date\\n        }\\n      }\\n      \"]);\n\n  _templateObject5 = function _templateObject5() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject4() {\n  var data = _taggedTemplateLiteral([\"\\n      query getUsers( \\n        $age: String,\\n        $gender: String, \\n        $education: String \\n        $crossing_freq: String,\\n        $produce: String,\\n        $primary_income: String,\\n        $language: String,\\n        $country_of_residence: String,\\n        $procedurecommodity: String,\\n        $procedurecommoditycat: String,\\n        $proceduredest: String,\\n        $procedurerequireddocument: String,\\n        $procedurerelevantagency: String,\\n        $procedureorigin: String,\\n        $commoditycountry: String,\\n        $commoditymarket: String,\\n        $commodityproduct: String,\\n        $commoditycat: String,\\n        $exchangedirection: String,\\n        ){\\n        sessionsData (\\n          age: $age,\\n          gender: $gender, \\n          education: $education\\n          crossing_freq: $crossing_freq,\\n          produce: $produce,\\n          primary_income: $primary_income,\\n          language: $language,\\n          country_of_residence: $country_of_residence,\\n          procedurecommodity: $procedurecommodity,\\n          procedurecommoditycat: $procedurecommoditycat,\\n          proceduredest: $proceduredest,\\n          procedurerequireddocument: $procedurerequireddocument,\\n          procedurerelevantagency: $procedurerelevantagency,\\n          procedureorigin: $procedureorigin,\\n          commoditycountry: $commoditycountry,\\n          commoditymarket: $commoditymarket,\\n          commodityproduct: $commodityproduct,\\n          commoditycat: $commoditycat,\\n          exchangedirection: $exchangedirection,\\n          ) {\\n          \", \"\\n          \", \"\\n          created_date\\n        }\\n        additionalFilterData:sessionsData{\\n          \", \"\\n        }\\n      }\\n      \"]);\n\n  _templateObject4 = function _templateObject4() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\n      query getData(\\n        $age: String,\\n        $gender: String, \\n        $education: String, \\n        $crossing_freq: String,\\n        $produce: String,\\n        $primary_income: String,\\n        $language: String,\\n        $country_of_residence: String,\\n        $procedurecommodity: String,\\n        $procedurecommoditycat: String,\\n        $proceduredest: String,\\n        $procedurerequireddocument: String,\\n        $procedurerelevantagency: String,\\n        $procedureorigin: String,\\n        $commoditycountry: String,\\n        $commoditymarket: String,\\n        $commodityproduct: String,\\n        $commoditycat: String,\\n        $exchangedirection: String,\\n        ){\\n        sessionsData(\\n          age: $age,\\n          gender: $gender, \\n          education: $education, \\n          crossing_freq: $crossing_freq,\\n          produce: $produce,\\n          primary_income: $primary_income,\\n          language: $language,\\n          country_of_residence: $country_of_residence,\\n          procedurecommodity: $procedurecommodity,\\n          procedurecommoditycat: $procedurecommoditycat,\\n          proceduredest: $proceduredest,\\n          procedurerequireddocument: $procedurerequireddocument,\\n          procedurerelevantagency: $procedurerelevantagency,\\n          procedureorigin: $procedureorigin,\\n          commoditycountry: $commoditycountry,\\n          commoditymarket: $commoditymarket,\\n          commodityproduct: $commodityproduct,\\n          commoditycat: $commoditycat,\\n          exchangedirection: $exchangedirection,\\n          ){\\n          \", \"\\n          \", \"\\n          created_date\\n        }\\n      }\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n      query getData(\\n        $age: String,\\n        $gender: String, \\n        $education: String, \\n        $crossing_freq: String,\\n        $produce: String,\\n        $primary_income: String,\\n        $language: String,\\n        $country_of_residence: String,\\n        $procedurecommodity: String,\\n        $procedurecommoditycat: String,\\n        $proceduredest: String,\\n        $procedurerequireddocument: String,\\n        $procedurerelevantagency: String,\\n        $procedureorigin: String,\\n        $commoditycountry: String,\\n        $commoditymarket: String,\\n        $commodityproduct: String,\\n        $commoditycat: String,\\n        $exchangedirection: String,\\n        ){\\n          sessionsData(\\n          age: $age,\\n          gender: $gender, \\n          education: $education, \\n          crossing_freq: $crossing_freq,\\n          produce: $produce,\\n          primary_income: $primary_income,\\n          language: $language,\\n          country_of_residence: $country_of_residence,\\n          procedurecommodity: $procedurecommodity,\\n          procedurecommoditycat: $procedurecommoditycat,\\n          proceduredest: $proceduredest,\\n          procedurerequireddocument: $procedurerequireddocument,\\n          procedurerelevantagency: $procedurerelevantagency,\\n          procedureorigin: $procedureorigin,\\n          commoditycountry: $commoditycountry,\\n          commoditymarket: $commoditymarket,\\n          commodityproduct: $commodityproduct,\\n          commoditycat: $commoditycat,\\n          exchangedirection: $exchangedirection,\\n          ){\\n          \", \"\\n          \", \"\\n          created_date\\n        }\\n      }\\n      \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n      query getUsers( \\n        $age: String,\\n        $gender: String, \\n        $education: String \\n        $crossing_freq: String,\\n        $produce: String,\\n        $primary_income: String,\\n        $language: String,\\n        $country_of_residence: String,\\n        ){\\n        tradersUsers (\\n          age: $age,\\n          gender: $gender, \\n          education: $education\\n          crossing_freq: $crossing_freq,\\n          produce: $produce,\\n          primary_income: $primary_income,\\n          language: $language,\\n          country_of_residence: $country_of_residence\\n          ) {\\n          \", \"\\n          \", \"\\n        }\\n      }\\n      \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from \"react\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { gql } from \"apollo-boost\";\nimport Graph from \"./Graph\";\nimport Loader from \"react-loader-spinner\";\nimport dataParse from \"./dataParse\";\nimport getIndex from \"../DataParseHelpers/getIndex\";\nimport graphLabels from \"./graphLabels\";\nimport removeMultiple from \"./removeMultiple\";\n\nvar GetData = function GetData(props) {\n  var queryType = \"tradersUsers\";\n  var QUERY;\n\n  if (props.index.query === \"Users\" && props.crossFilter.query === \"Users\" && !props.additionalFilter.type) {\n    queryType = \"tradersUsers\";\n    QUERY = gql(_templateObject(), props.index.type, props.crossFilter.type);\n  } else if (props.index.query === \"Sessions\" && props.crossFilter.query === \"Users\" && !props.additionalFilter.type) {\n    queryType = \"sessionsData\";\n    QUERY = gql(_templateObject2(), props.index.type, props.crossFilter.type);\n  } else if (props.index.query === \"Users\" && props.crossFilter.query === \"Sessions\" && !props.additionalFilter.type) {\n    queryType = \"sessionsData\";\n    QUERY = gql(_templateObject3(), props.index.type, props.crossFilter.type);\n  } else if (props.index.query === \"Users\" && props.crossFilter.query === \"Users\") {\n    queryType = \"sessionsData\";\n    QUERY = gql(_templateObject4(), props.index.type, props.crossFilter.type, props.additionalFilter.type);\n  } else if (props.index.query === \"Sessions\" && props.crossFilter.query === \"Sessions\" && !props.additionalFilter.type) {\n    queryType = \"sessionsData\";\n    QUERY = gql(_templateObject5(), props.index.type, props.crossFilter.type);\n  } else {\n    queryType = \"sessionsData\";\n    QUERY = gql(_templateObject6(), props.index.type, props.crossFilter.type, props.additionalFilter.type);\n  }\n\n  var policyType;\n\n  if (props.additionalFilter.type && !graphLabels[\"\".concat(props.additionalFilter.type)]) {\n    policyType = \"network-only\";\n  } else {\n    policyType = \"cache-first\";\n  }\n\n  var _useQuery = useQuery(QUERY, {\n    variables: _objectSpread({}, props.selectedCheckbox),\n    fetchPolicy: policyType\n  }),\n      loading = _useQuery.loading,\n      data = _useQuery.data;\n\n  if (loading) {\n    return React.createElement(\"div\", {\n      className: \"loader-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 325\n      },\n      __self: this\n    }, React.createElement(Loader, {\n      className: \"loader\",\n      type: \"Oval\",\n      color: \"#708090\",\n      width: 100,\n      timeout: 12000,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 326\n      },\n      __self: this\n    }));\n  } // data = [...data.tradersUsers, ...data.tradersData] // This is for when we are supporting multiple queries of same type\n\n\n  var filteredData; // This is how we nab checkbox options.\n\n  if (props.additionalFilter.type && !graphLabels[\"\".concat(props.additionalFilter.type)]) {\n    console.log('additional filter data', data.additionalFilterData);\n    removeMultiple(data.additionalFilterData);\n    filteredData = getIndex(data.additionalFilterData, \"\".concat(props.additionalFilter.type)).map(function (obj) {\n      return obj[\"\".concat(props.additionalFilter.type)];\n    });\n    filteredData = filteredData.filter(function (item) {\n      return item !== null;\n    });\n  }\n\n  ;\n  var chartData = dataParse(props.index.type, data[\"\".concat(queryType)], props.crossFilter.type, props.startDate, props.endDate, props.additionalFilter.type, props.index.query); /// first arg is what we are indexing by, second is data, third is what we are cross-filtering by. Will get changed to dynamic inputs\n\n  if (props.crossFilter.type !== \"\") {\n    var _React$createElement;\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 359\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"graph-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 360\n      },\n      __self: this\n    }, props.label, \" by \", props.crossLabel), props.additionalFilter.type && React.createElement(\"h3\", {\n      className: \"graph-title-small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364\n      },\n      __self: this\n    }, \"Additional Filter: \", props.additionalFilter.label, \" - \", Object.values(props.selectedCheckbox).length === 0 ? \"none\" : Object.values(props.selectedCheckbox)[0]), React.createElement(Graph, (_React$createElement = {\n      data: chartData.percentageData,\n      csvData: chartData.dataStructure,\n      crossFilter: props.crossFilter.type,\n      additionalFilter: props.additionalFilter.type,\n      selectedCheckbox: props.selectedCheckbox,\n      keys: chartData.crossFilterValues,\n      index: props.index.type,\n      label: props.label,\n      groupMode: \"grouped\",\n      filteredData: filteredData,\n      sampleSize: chartData.totalSampleSize,\n      checkboxOptions: props.checkboxOptions,\n      setCheckboxOptions: props.setCheckboxOptions\n    }, _defineProperty(_React$createElement, \"selectedCheckbox\", props.selectedCheckbox), _defineProperty(_React$createElement, \"argForQuery\", props.argForQuery), _defineProperty(_React$createElement, \"__source\", {\n      fileName: _jsxFileName,\n      lineNumber: 367\n    }), _defineProperty(_React$createElement, \"__self\", this), _React$createElement)));\n  } else {\n    var _React$createElement2;\n\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 388\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"graph-title\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389\n      },\n      __self: this\n    }, props.label), props.additionalFilter.type && React.createElement(\"h3\", {\n      className: \"graph-title-small\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 391\n      },\n      __self: this\n    }, \"Additional Filter: \", props.additionalFilter.label, \" - \", Object.values(props.selectedCheckbox).length === 0 ? \"none\" : Object.values(props.selectedCheckbox)[0]), React.createElement(Graph, (_React$createElement2 = {\n      data: chartData.percentageData,\n      csvData: chartData.dataStructure,\n      additionalFilter: props.additionalFilter.type,\n      selectedCheckbox: props.selectedCheckbox,\n      crossFilter: props.crossFilter.type,\n      keys: chartData.keys || chartData.csvKeys,\n      index: props.index.type,\n      label: props.label,\n      groupMode: \"stacked\",\n      filteredData: filteredData,\n      sampleSize: chartData.sampleSize,\n      checkboxOptions: props.checkboxOptions,\n      setCheckboxOptions: props.setCheckboxOptions\n    }, _defineProperty(_React$createElement2, \"selectedCheckbox\", props.selectedCheckbox), _defineProperty(_React$createElement2, \"argForQuery\", props.argForQuery), _defineProperty(_React$createElement2, \"__source\", {\n      fileName: _jsxFileName,\n      lineNumber: 393\n    }), _defineProperty(_React$createElement2, \"__self\", this), _React$createElement2)));\n  }\n};\n\nexport default GetData;","map":{"version":3,"sources":["C:/Users/mesty/Lambda/Forked-Lambda-Copies/labs 19/sauti-databank-fe/src/Components/Queries.js"],"names":["React","useQuery","gql","Graph","Loader","dataParse","getIndex","graphLabels","removeMultiple","GetData","props","queryType","QUERY","index","query","crossFilter","additionalFilter","type","policyType","variables","selectedCheckbox","fetchPolicy","loading","data","filteredData","console","log","additionalFilterData","map","obj","filter","item","chartData","startDate","endDate","label","crossLabel","Object","values","length","percentageData","dataStructure","crossFilterValues","totalSampleSize","checkboxOptions","setCheckboxOptions","argForQuery","keys","csvKeys","sampleSize"],"mappings":"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","sourcesContent":["import React from \"react\";\r\nimport { useQuery } from \"@apollo/react-hooks\";\r\nimport { gql } from \"apollo-boost\";\r\nimport Graph from \"./Graph\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport dataParse from \"./dataParse\";\r\nimport getIndex from \"../DataParseHelpers/getIndex\"\r\nimport graphLabels from \"./graphLabels\"\r\nimport removeMultiple from \"./removeMultiple\";\r\n\r\nconst GetData = props => {\r\n  let queryType = \"tradersUsers\";\r\n  let QUERY;\r\n\r\n  if (props.index.query === \"Users\" && props.crossFilter.query === \"Users\" && !props.additionalFilter.type) {\r\n    queryType = \"tradersUsers\";\r\n    QUERY = gql`\r\n      query getUsers( \r\n        $age: String,\r\n        $gender: String, \r\n        $education: String \r\n        $crossing_freq: String,\r\n        $produce: String,\r\n        $primary_income: String,\r\n        $language: String,\r\n        $country_of_residence: String,\r\n        ){\r\n        tradersUsers (\r\n          age: $age,\r\n          gender: $gender, \r\n          education: $education\r\n          crossing_freq: $crossing_freq,\r\n          produce: $produce,\r\n          primary_income: $primary_income,\r\n          language: $language,\r\n          country_of_residence: $country_of_residence\r\n          ) {\r\n          ${props.index.type}\r\n          ${props.crossFilter.type}\r\n        }\r\n      }\r\n      `;\r\n  } else if (\r\n    props.index.query === \"Sessions\" &&\r\n    props.crossFilter.query === \"Users\" &&\r\n    !props.additionalFilter.type\r\n  ) {\r\n    queryType = \"sessionsData\";\r\n\r\n    QUERY = gql`\r\n      query getData(\r\n        $age: String,\r\n        $gender: String, \r\n        $education: String, \r\n        $crossing_freq: String,\r\n        $produce: String,\r\n        $primary_income: String,\r\n        $language: String,\r\n        $country_of_residence: String,\r\n        $procedurecommodity: String,\r\n        $procedurecommoditycat: String,\r\n        $proceduredest: String,\r\n        $procedurerequireddocument: String,\r\n        $procedurerelevantagency: String,\r\n        $procedureorigin: String,\r\n        $commoditycountry: String,\r\n        $commoditymarket: String,\r\n        $commodityproduct: String,\r\n        $commoditycat: String,\r\n        $exchangedirection: String,\r\n        ){\r\n          sessionsData(\r\n          age: $age,\r\n          gender: $gender, \r\n          education: $education, \r\n          crossing_freq: $crossing_freq,\r\n          produce: $produce,\r\n          primary_income: $primary_income,\r\n          language: $language,\r\n          country_of_residence: $country_of_residence,\r\n          procedurecommodity: $procedurecommodity,\r\n          procedurecommoditycat: $procedurecommoditycat,\r\n          proceduredest: $proceduredest,\r\n          procedurerequireddocument: $procedurerequireddocument,\r\n          procedurerelevantagency: $procedurerelevantagency,\r\n          procedureorigin: $procedureorigin,\r\n          commoditycountry: $commoditycountry,\r\n          commoditymarket: $commoditymarket,\r\n          commodityproduct: $commodityproduct,\r\n          commoditycat: $commoditycat,\r\n          exchangedirection: $exchangedirection,\r\n          ){\r\n          ${props.index.type}\r\n          ${props.crossFilter.type}\r\n          created_date\r\n        }\r\n      }\r\n      `;\r\n  } else if (props.index.query === \"Users\" && props.crossFilter.query === \"Sessions\" && !props.additionalFilter.type) {\r\n    queryType = \"sessionsData\"\r\n    QUERY = gql`\r\n      query getData(\r\n        $age: String,\r\n        $gender: String, \r\n        $education: String, \r\n        $crossing_freq: String,\r\n        $produce: String,\r\n        $primary_income: String,\r\n        $language: String,\r\n        $country_of_residence: String,\r\n        $procedurecommodity: String,\r\n        $procedurecommoditycat: String,\r\n        $proceduredest: String,\r\n        $procedurerequireddocument: String,\r\n        $procedurerelevantagency: String,\r\n        $procedureorigin: String,\r\n        $commoditycountry: String,\r\n        $commoditymarket: String,\r\n        $commodityproduct: String,\r\n        $commoditycat: String,\r\n        $exchangedirection: String,\r\n        ){\r\n        sessionsData(\r\n          age: $age,\r\n          gender: $gender, \r\n          education: $education, \r\n          crossing_freq: $crossing_freq,\r\n          produce: $produce,\r\n          primary_income: $primary_income,\r\n          language: $language,\r\n          country_of_residence: $country_of_residence,\r\n          procedurecommodity: $procedurecommodity,\r\n          procedurecommoditycat: $procedurecommoditycat,\r\n          proceduredest: $proceduredest,\r\n          procedurerequireddocument: $procedurerequireddocument,\r\n          procedurerelevantagency: $procedurerelevantagency,\r\n          procedureorigin: $procedureorigin,\r\n          commoditycountry: $commoditycountry,\r\n          commoditymarket: $commoditymarket,\r\n          commodityproduct: $commodityproduct,\r\n          commoditycat: $commoditycat,\r\n          exchangedirection: $exchangedirection,\r\n          ){\r\n          ${props.index.type}\r\n          ${props.crossFilter.type}\r\n          created_date\r\n        }\r\n      }`\r\n  } else if (props.index.query === \"Users\" && props.crossFilter.query === \"Users\") {\r\n    queryType = \"sessionsData\";\r\n    QUERY = gql`\r\n      query getUsers( \r\n        $age: String,\r\n        $gender: String, \r\n        $education: String \r\n        $crossing_freq: String,\r\n        $produce: String,\r\n        $primary_income: String,\r\n        $language: String,\r\n        $country_of_residence: String,\r\n        $procedurecommodity: String,\r\n        $procedurecommoditycat: String,\r\n        $proceduredest: String,\r\n        $procedurerequireddocument: String,\r\n        $procedurerelevantagency: String,\r\n        $procedureorigin: String,\r\n        $commoditycountry: String,\r\n        $commoditymarket: String,\r\n        $commodityproduct: String,\r\n        $commoditycat: String,\r\n        $exchangedirection: String,\r\n        ){\r\n        sessionsData (\r\n          age: $age,\r\n          gender: $gender, \r\n          education: $education\r\n          crossing_freq: $crossing_freq,\r\n          produce: $produce,\r\n          primary_income: $primary_income,\r\n          language: $language,\r\n          country_of_residence: $country_of_residence,\r\n          procedurecommodity: $procedurecommodity,\r\n          procedurecommoditycat: $procedurecommoditycat,\r\n          proceduredest: $proceduredest,\r\n          procedurerequireddocument: $procedurerequireddocument,\r\n          procedurerelevantagency: $procedurerelevantagency,\r\n          procedureorigin: $procedureorigin,\r\n          commoditycountry: $commoditycountry,\r\n          commoditymarket: $commoditymarket,\r\n          commodityproduct: $commodityproduct,\r\n          commoditycat: $commoditycat,\r\n          exchangedirection: $exchangedirection,\r\n          ) {\r\n          ${props.index.type}\r\n          ${props.crossFilter.type}\r\n          created_date\r\n        }\r\n        additionalFilterData:sessionsData{\r\n          ${props.additionalFilter.type}\r\n        }\r\n      }\r\n      `;\r\n  } else if (props.index.query === \"Sessions\" && props.crossFilter.query === \"Sessions\" && !props.additionalFilter.type) {\r\n    queryType = \"sessionsData\";\r\n    QUERY = gql`\r\n      query getUsers( \r\n        $age: String,\r\n        $gender: String, \r\n        $education: String \r\n        $crossing_freq: String,\r\n        $produce: String,\r\n        $primary_income: String,\r\n        $language: String,\r\n        $country_of_residence: String,\r\n        $procedurecommodity: String,\r\n        $procedurecommoditycat: String,\r\n        $proceduredest: String,\r\n        $procedurerequireddocument: String,\r\n        $procedurerelevantagency: String,\r\n        $procedureorigin: String,\r\n        $commoditycountry: String,\r\n        $commoditymarket: String,\r\n        $commodityproduct: String,\r\n        $commoditycat: String,\r\n        $exchangedirection: String,\r\n        ){\r\n        sessionsData (\r\n          age: $age,\r\n          gender: $gender, \r\n          education: $education\r\n          crossing_freq: $crossing_freq,\r\n          produce: $produce,\r\n          primary_income: $primary_income,\r\n          language: $language,\r\n          country_of_residence: $country_of_residence,\r\n          procedurecommodity: $procedurecommodity,\r\n          procedurecommoditycat: $procedurecommoditycat,\r\n          proceduredest: $proceduredest,\r\n          procedurerequireddocument: $procedurerequireddocument,\r\n          procedurerelevantagency: $procedurerelevantagency,\r\n          procedureorigin: $procedureorigin,\r\n          commoditycountry: $commoditycountry,\r\n          commoditymarket: $commoditymarket,\r\n          commodityproduct: $commodityproduct,\r\n          commoditycat: $commoditycat,\r\n          exchangedirection: $exchangedirection,\r\n          ) {\r\n          ${props.index.type}\r\n          ${props.crossFilter.type}\r\n          created_date\r\n        }\r\n      }\r\n      `;\r\n  } else {\r\n    queryType = \"sessionsData\";\r\n    QUERY = gql`\r\n      query getData(\r\n        $age: String,\r\n        $gender: String, \r\n        $education: String, \r\n        $crossing_freq: String,\r\n        $produce: String,\r\n        $primary_income: String,\r\n        $language: String,\r\n        $country_of_residence: String,\r\n        $procedurecommodity: String,\r\n        $procedurecommoditycat: String,\r\n        $proceduredest: String,\r\n        $procedurerequireddocument: String,\r\n        $procedurerelevantagency: String,\r\n        $procedureorigin: String,\r\n        $commoditycountry: String,\r\n        $commoditymarket: String,\r\n        $commodityproduct: String,\r\n        $commoditycat: String,\r\n        $exchangedirection: String,\r\n        ){\r\n        sessionsData(\r\n          age: $age,\r\n          gender: $gender, \r\n          education: $education, \r\n          crossing_freq: $crossing_freq,\r\n          produce: $produce,\r\n          primary_income: $primary_income,\r\n          language: $language,\r\n          country_of_residence: $country_of_residence,\r\n          procedurecommodity: $procedurecommodity,\r\n          procedurecommoditycat: $procedurecommoditycat,\r\n          proceduredest: $proceduredest,\r\n          procedurerequireddocument: $procedurerequireddocument,\r\n          procedurerelevantagency: $procedurerelevantagency,\r\n          procedureorigin: $procedureorigin,\r\n          commoditycountry: $commoditycountry,\r\n          commoditymarket: $commoditymarket,\r\n          commodityproduct: $commodityproduct,\r\n          commoditycat: $commoditycat,\r\n          exchangedirection: $exchangedirection,\r\n          ){\r\n          ${props.index.type}\r\n          ${props.crossFilter.type}\r\n          created_date\r\n        }\r\n        additionalFilterData:sessionsData{\r\n            ${props.additionalFilter.type}\r\n        }\r\n      }\r\n      `;\r\n  }\r\n\r\n  let policyType;\r\n  if (props.additionalFilter.type && !graphLabels[`${props.additionalFilter.type}`]) {\r\n    policyType = \"network-only\";\r\n  } else {\r\n    policyType = \"cache-first\";\r\n  }\r\n\r\n  let { loading, data } = useQuery(QUERY, {\r\n\r\n    variables: { ...props.selectedCheckbox },\r\n    fetchPolicy: policyType\r\n  });\r\n\r\n  if (loading) {\r\n    return (\r\n      <div className=\"loader-container\">\r\n        <Loader\r\n          className=\"loader\"\r\n          type=\"Oval\"\r\n          color=\"#708090\"\r\n          width={100}\r\n          timeout={12000}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  // data = [...data.tradersUsers, ...data.tradersData] // This is for when we are supporting multiple queries of same type\r\n\r\n  let filteredData;\r\n  // This is how we nab checkbox options.\r\n  if (props.additionalFilter.type && !graphLabels[`${props.additionalFilter.type}`]) {\r\n    console.log('additional filter data', data.additionalFilterData)\r\n    removeMultiple(data.additionalFilterData)\r\n    filteredData = getIndex(data.additionalFilterData, `${props.additionalFilter.type}`).map(obj => obj[`${props.additionalFilter.type}`]);\r\n    filteredData = filteredData.filter(item => item !== null)\r\n  };\r\n\r\n  const chartData = dataParse(\r\n    props.index.type,\r\n    data[`${queryType}`],\r\n    props.crossFilter.type,\r\n    props.startDate,\r\n    props.endDate,\r\n    props.additionalFilter.type,\r\n    props.index.query\r\n  ); /// first arg is what we are indexing by, second is data, third is what we are cross-filtering by. Will get changed to dynamic inputs\r\n\r\n  if (props.crossFilter.type !== \"\") {\r\n    return (\r\n      <div>\r\n        <h1 className=\"graph-title\">\r\n          {props.label} by {props.crossLabel}\r\n        </h1>\r\n        {props.additionalFilter.type &&\r\n          <h3 className=\"graph-title-small\">Additional Filter: {props.additionalFilter.label} - {Object.values(props.selectedCheckbox).length === 0 ? \"none\" : Object.values(props.selectedCheckbox)[0]}</h3>\r\n        }\r\n\r\n        <Graph\r\n          data={chartData.percentageData}\r\n          csvData={chartData.dataStructure}\r\n          crossFilter={props.crossFilter.type}\r\n          additionalFilter={props.additionalFilter.type}\r\n          selectedCheckbox={props.selectedCheckbox}\r\n          keys={chartData.crossFilterValues}\r\n          index={props.index.type}\r\n          label={props.label}\r\n          groupMode={\"grouped\"}\r\n          filteredData={filteredData}\r\n          sampleSize={chartData.totalSampleSize}\r\n          checkboxOptions={props.checkboxOptions}\r\n          setCheckboxOptions={props.setCheckboxOptions}\r\n          selectedCheckbox={props.selectedCheckbox}\r\n          argForQuery={props.argForQuery}\r\n        />\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div>\r\n        <h1 className=\"graph-title\">{props.label}</h1>\r\n        {props.additionalFilter.type &&\r\n          <h3 className=\"graph-title-small\">Additional Filter: {props.additionalFilter.label} - {Object.values(props.selectedCheckbox).length === 0 ? \"none\" : Object.values(props.selectedCheckbox)[0]}</h3>\r\n        }\r\n        <Graph\r\n          data={chartData.percentageData}\r\n          csvData={chartData.dataStructure}\r\n          additionalFilter={props.additionalFilter.type}\r\n          selectedCheckbox={props.selectedCheckbox}\r\n          crossFilter={props.crossFilter.type}\r\n          keys={chartData.keys || chartData.csvKeys}\r\n          index={props.index.type}\r\n          label={props.label}\r\n          groupMode={\"stacked\"}\r\n          filteredData={filteredData}\r\n          sampleSize={chartData.sampleSize}\r\n          checkboxOptions={props.checkboxOptions}\r\n          setCheckboxOptions={props.setCheckboxOptions}\r\n          selectedCheckbox={props.selectedCheckbox}\r\n          argForQuery={props.argForQuery}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nexport default GetData;\r\n"]},"metadata":{},"sourceType":"module"}