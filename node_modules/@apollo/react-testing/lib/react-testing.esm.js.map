{"version":3,"file":"react-testing.esm.js","sources":["../src/mocks/mockLink.ts","../src/mocks/MockedProvider.tsx","../src/mocks/mockSubscriptionLink.ts","../src/utils/createClient.ts","../src/utils/stripSymbols.ts","../src/utils/wait.ts"],"sourcesContent":["import {\n  Operation,\n  GraphQLRequest,\n  ApolloLink,\n  FetchResult,\n  Observable\n} from 'apollo-link';\nimport {\n  addTypenameToDocument,\n  removeClientSetsFromDocument,\n  removeConnectionDirectiveFromDocument,\n  cloneDeep,\n  isEqual\n} from 'apollo-utilities';\nimport { print } from 'graphql/language/printer';\nimport stringify from 'fast-json-stable-stringify';\n\nimport { MockedResponse, ResultFunction } from './types';\n\nfunction requestToKey(request: GraphQLRequest, addTypename: Boolean): string {\n  const queryString =\n    request.query &&\n    print(addTypename ? addTypenameToDocument(request.query) : request.query);\n  const requestKey = { query: queryString };\n  return JSON.stringify(requestKey);\n}\n\nexport class MockLink extends ApolloLink {\n  public addTypename: Boolean = true;\n  private mockedResponsesByKey: { [key: string]: MockedResponse[] } = {};\n\n  constructor(\n    mockedResponses: ReadonlyArray<MockedResponse>,\n    addTypename: Boolean = true\n  ) {\n    super();\n    this.addTypename = addTypename;\n    if (mockedResponses)\n      mockedResponses.forEach(mockedResponse => {\n        this.addMockedResponse(mockedResponse);\n      });\n  }\n\n  public addMockedResponse(mockedResponse: MockedResponse) {\n    const normalizedMockedResponse = this.normalizeMockedResponse(\n      mockedResponse\n    );\n    const key = requestToKey(\n      normalizedMockedResponse.request,\n      this.addTypename\n    );\n    let mockedResponses = this.mockedResponsesByKey[key];\n    if (!mockedResponses) {\n      mockedResponses = [];\n      this.mockedResponsesByKey[key] = mockedResponses;\n    }\n    mockedResponses.push(normalizedMockedResponse);\n  }\n\n  public request(operation: Operation): Observable<FetchResult> | null {\n    const key = requestToKey(operation, this.addTypename);\n    let responseIndex;\n    const response = (this.mockedResponsesByKey[key] || []).find(\n      (res, index) => {\n        const requestVariables = operation.variables || {};\n        const mockedResponseVariables = res.request.variables || {};\n        if (\n          !isEqual(\n            stringify(requestVariables),\n            stringify(mockedResponseVariables)\n          )\n        ) {\n          return false;\n        }\n        responseIndex = index;\n        return true;\n      }\n    );\n\n    if (!response || typeof responseIndex === 'undefined') {\n      throw new Error(\n        `No more mocked responses for the query: ${print(\n          operation.query\n        )}, variables: ${JSON.stringify(operation.variables)}`\n      );\n    }\n\n    this.mockedResponsesByKey[key].splice(responseIndex, 1);\n\n    const { newData } = response;\n\n    if (newData) {\n      response.result = newData();\n      this.mockedResponsesByKey[key].push(response);\n    }\n\n    const { result, error, delay } = response;\n\n    if (!result && !error) {\n      throw new Error(\n        `Mocked response should contain either result or error: ${key}`\n      );\n    }\n\n    return new Observable(observer => {\n      let timer = setTimeout(\n        () => {\n          if (error) {\n            observer.error(error);\n          } else {\n            if (result) {\n              observer.next(\n                typeof result === 'function'\n                  ? (result as ResultFunction<FetchResult>)()\n                  : result\n              );\n            }\n            observer.complete();\n          }\n        },\n        delay ? delay : 0\n      );\n\n      return () => {\n        clearTimeout(timer);\n      };\n    });\n  }\n\n  private normalizeMockedResponse(\n    mockedResponse: MockedResponse\n  ): MockedResponse {\n    const newMockedResponse = cloneDeep(mockedResponse);\n    newMockedResponse.request.query = removeConnectionDirectiveFromDocument(\n      newMockedResponse.request.query\n    );\n    const query = removeClientSetsFromDocument(newMockedResponse.request.query);\n    if (query) {\n      newMockedResponse.request.query = query;\n    }\n    return newMockedResponse;\n  }\n}\n\n// Pass in multiple mocked responses, so that you can test flows that end up\n// making multiple queries to the server.\n// NOTE: The last arg can optionally be an `addTypename` arg.\nexport function mockSingleLink(...mockedResponses: Array<any>): ApolloLink {\n  // To pull off the potential typename. If this isn't a boolean, we'll just\n  // set it true later.\n  let maybeTypename = mockedResponses[mockedResponses.length - 1];\n  let mocks = mockedResponses.slice(0, mockedResponses.length - 1);\n\n  if (typeof maybeTypename !== 'boolean') {\n    mocks = mockedResponses;\n    maybeTypename = true;\n  }\n\n  return new MockLink(mocks, maybeTypename);\n}\n","import React from 'react';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache as Cache } from 'apollo-cache-inmemory';\nimport { ApolloProvider } from '@apollo/react-common';\nimport { MockLink } from './mockLink';\nimport { MockedProviderProps, MockedProviderState } from './types';\n\nexport class MockedProvider extends React.Component<\n  MockedProviderProps,\n  MockedProviderState\n> {\n  public static defaultProps: MockedProviderProps = {\n    addTypename: true\n  };\n\n  constructor(props: MockedProviderProps) {\n    super(props);\n\n    const {\n      mocks,\n      addTypename,\n      defaultOptions,\n      cache,\n      resolvers,\n      link\n    } = this.props;\n    const client = new ApolloClient({\n      cache: cache || new Cache({ addTypename }),\n      defaultOptions,\n      link: link || new MockLink(mocks || [], addTypename),\n      resolvers\n    });\n\n    this.state = { client };\n  }\n\n  public render() {\n    const { children, childProps } = this.props;\n    return children ? (\n      <ApolloProvider client={this.state.client}>\n        {React.cloneElement(React.Children.only(children), { ...childProps })}\n      </ApolloProvider>\n    ) : null;\n  }\n\n  public componentWillUnmount() {\n    // Since this.state.client was created in the constructor, it's this\n    // MockedProvider's responsibility to terminate it.\n    this.state.client.stop();\n  }\n}\n","import { ApolloLink, FetchResult, Observable } from 'apollo-link';\n\nimport { MockedSubscriptionResult } from './types';\n\nexport class MockSubscriptionLink extends ApolloLink {\n  public unsubscribers: any[] = [];\n  public setups: any[] = [];\n\n  private observer: any;\n\n  constructor() {\n    super();\n  }\n\n  public request(_req: any) {\n    return new Observable<FetchResult>(observer => {\n      this.setups.forEach(x => x());\n      this.observer = observer;\n      return () => {\n        this.unsubscribers.forEach(x => x());\n      };\n    });\n  }\n\n  public simulateResult(result: MockedSubscriptionResult, complete = false) {\n    setTimeout(() => {\n      const { observer } = this;\n      if (!observer) throw new Error('subscription torn down');\n      if (complete && observer.complete) observer.complete();\n      if (result.result && observer.next) observer.next(result.result);\n      if (result.error && observer.error) observer.error(result.error);\n    }, result.delay || 0);\n  }\n\n  public onSetup(listener: any): void {\n    this.setups = this.setups.concat([listener]);\n  }\n\n  public onUnsubscribe(listener: any): void {\n    this.unsubscribers = this.unsubscribers.concat([listener]);\n  }\n}\n\nexport function mockObservableLink(): MockSubscriptionLink {\n  return new MockSubscriptionLink();\n}\n","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory';\nimport { DocumentNode } from 'graphql';\n\nimport { mockSingleLink } from '../mocks/mockLink';\n\nexport function createClient<TData>(\n  data: TData,\n  query: DocumentNode,\n  variables = {},\n): ApolloClient<NormalizedCacheObject> {\n  return new ApolloClient({\n    link: mockSingleLink({\n      request: { query, variables },\n      result: { data },\n    }),\n    cache: new InMemoryCache({ addTypename: false }),\n  });\n}\n","/**\n * Apollo-client adds Symbols to the data in the store. In order to make\n * assertions in our tests easier we strip these Symbols from the data.\n */\nexport function stripSymbols<T>(data: T): T {\n  return JSON.parse(JSON.stringify(data));\n}\n","export function wait(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"],"names":["Cache"],"mappings":";;;;;;;;;;AAmBA,SAAS,YAAY,CAAC,OAAuB,EAAE,WAAoB;IACjE,IAAM,WAAW,GACf,OAAO,CAAC,KAAK;QACb,KAAK,CAAC,WAAW,GAAG,qBAAqB,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;IAC5E,IAAM,UAAU,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;IAC1C,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;CACnC;AAED;IAA8B,4BAAU;IAItC,kBACE,eAA8C,EAC9C,WAA2B;QAA3B,4BAAA,EAAA,kBAA2B;QAF7B,YAIE,iBAAO,SAMR;QAbM,iBAAW,GAAY,IAAI,CAAC;QAC3B,0BAAoB,GAAwC,EAAE,CAAC;QAOrE,KAAI,CAAC,WAAW,GAAG,WAAW,CAAC;QAC/B,IAAI,eAAe;YACjB,eAAe,CAAC,OAAO,CAAC,UAAA,cAAc;gBACpC,KAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC;aACxC,CAAC,CAAC;;KACN;IAEM,oCAAiB,GAAxB,UAAyB,cAA8B;QACrD,IAAM,wBAAwB,GAAG,IAAI,CAAC,uBAAuB,CAC3D,cAAc,CACf,CAAC;QACF,IAAM,GAAG,GAAG,YAAY,CACtB,wBAAwB,CAAC,OAAO,EAChC,IAAI,CAAC,WAAW,CACjB,CAAC;QACF,IAAI,eAAe,GAAG,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC;QACrD,IAAI,CAAC,eAAe,EAAE;YACpB,eAAe,GAAG,EAAE,CAAC;YACrB,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,GAAG,eAAe,CAAC;SAClD;QACD,eAAe,CAAC,IAAI,CAAC,wBAAwB,CAAC,CAAC;KAChD;IAEM,0BAAO,GAAd,UAAe,SAAoB;QACjC,IAAM,GAAG,GAAG,YAAY,CAAC,SAAS,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QACtD,IAAI,aAAa,CAAC;QAClB,IAAM,QAAQ,GAAG,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,IAAI,EAAE,EAAE,IAAI,CAC1D,UAAC,GAAG,EAAE,KAAK;YACT,IAAM,gBAAgB,GAAG,SAAS,CAAC,SAAS,IAAI,EAAE,CAAC;YACnD,IAAM,uBAAuB,GAAG,GAAG,CAAC,OAAO,CAAC,SAAS,IAAI,EAAE,CAAC;YAC5D,IACE,CAAC,OAAO,CACN,SAAS,CAAC,gBAAgB,CAAC,EAC3B,SAAS,CAAC,uBAAuB,CAAC,CACnC,EACD;gBACA,OAAO,KAAK,CAAC;aACd;YACD,aAAa,GAAG,KAAK,CAAC;YACtB,OAAO,IAAI,CAAC;SACb,CACF,CAAC;QAEF,IAAI,CAAC,QAAQ,IAAI,OAAO,aAAa,KAAK,WAAW,EAAE;YACrD,MAAM,IAAI,KAAK,CACb,6CAA2C,KAAK,CAC9C,SAAS,CAAC,KAAK,CAChB,qBAAgB,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,SAAS,CAAG,CACvD,CAAC;SACH;QAED,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,aAAa,EAAE,CAAC,CAAC,CAAC;QAEhD,IAAA,0BAAO,CAAc;QAE7B,IAAI,OAAO,EAAE;YACX,QAAQ,CAAC,MAAM,GAAG,OAAO,EAAE,CAAC;YAC5B,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC/C;QAEO,IAAA,wBAAM,EAAE,sBAAK,EAAE,sBAAK,CAAc;QAE1C,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,EAAE;YACrB,MAAM,IAAI,KAAK,CACb,4DAA0D,GAAK,CAChE,CAAC;SACH;QAED,OAAO,IAAI,UAAU,CAAC,UAAA,QAAQ;YAC5B,IAAI,KAAK,GAAG,UAAU,CACpB;gBACE,IAAI,KAAK,EAAE;oBACT,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;iBACvB;qBAAM;oBACL,IAAI,MAAM,EAAE;wBACV,QAAQ,CAAC,IAAI,CACX,OAAO,MAAM,KAAK,UAAU;8BACvB,MAAsC,EAAE;8BACzC,MAAM,CACX,CAAC;qBACH;oBACD,QAAQ,CAAC,QAAQ,EAAE,CAAC;iBACrB;aACF,EACD,KAAK,GAAG,KAAK,GAAG,CAAC,CAClB,CAAC;YAEF,OAAO;gBACL,YAAY,CAAC,KAAK,CAAC,CAAC;aACrB,CAAC;SACH,CAAC,CAAC;KACJ;IAEO,0CAAuB,GAA/B,UACE,cAA8B;QAE9B,IAAM,iBAAiB,GAAG,SAAS,CAAC,cAAc,CAAC,CAAC;QACpD,iBAAiB,CAAC,OAAO,CAAC,KAAK,GAAG,qCAAqC,CACrE,iBAAiB,CAAC,OAAO,CAAC,KAAK,CAChC,CAAC;QACF,IAAM,KAAK,GAAG,4BAA4B,CAAC,iBAAiB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC5E,IAAI,KAAK,EAAE;YACT,iBAAiB,CAAC,OAAO,CAAC,KAAK,GAAG,KAAK,CAAC;SACzC;QACD,OAAO,iBAAiB,CAAC;KAC1B;IACH,eAAC;CAnHD,CAA8B,UAAU,GAmHvC;SAKe,cAAc;IAAC,yBAA8B;SAA9B,UAA8B,EAA9B,qBAA8B,EAA9B,IAA8B;QAA9B,oCAA8B;;IAG3D,IAAI,aAAa,GAAG,eAAe,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAChE,IAAI,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC,CAAC,EAAE,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;IAEjE,IAAI,OAAO,aAAa,KAAK,SAAS,EAAE;QACtC,KAAK,GAAG,eAAe,CAAC;QACxB,aAAa,GAAG,IAAI,CAAC;KACtB;IAED,OAAO,IAAI,QAAQ,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;CAC3C;;;ICxJmC,kCAGnC;IAKC,wBAAY,KAA0B;QAAtC,YACE,kBAAM,KAAK,CAAC,SAkBb;QAhBO,IAAA,gBAOQ,EANZ,gBAAK,EACL,4BAAW,EACX,kCAAc,EACd,gBAAK,EACL,wBAAS,EACT,cACY,CAAC;QACf,IAAM,MAAM,GAAG,IAAI,YAAY,CAAC;YAC9B,KAAK,EAAE,KAAK,IAAI,IAAIA,aAAK,CAAC,EAAE,WAAW,aAAA,EAAE,CAAC;YAC1C,cAAc,gBAAA;YACd,IAAI,EAAE,IAAI,IAAI,IAAI,QAAQ,CAAC,KAAK,IAAI,EAAE,EAAE,WAAW,CAAC;YACpD,SAAS,WAAA;SACV,CAAC,CAAC;QAEH,KAAI,CAAC,KAAK,GAAG,EAAE,MAAM,QAAA,EAAE,CAAC;;KACzB;IAEM,+BAAM,GAAb;QACQ,IAAA,eAAqC,EAAnC,sBAAQ,EAAE,0BAAyB,CAAC;QAC5C,OAAO,QAAQ,IACb,oBAAC,cAAc,IAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,IACtC,KAAK,CAAC,YAAY,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAO,UAAU,EAAG,CACtD,IACf,IAAI,CAAC;KACV;IAEM,6CAAoB,GAA3B;QAGE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;KAC1B;IAtCa,2BAAY,GAAwB;QAChD,WAAW,EAAE,IAAI;KAClB,CAAC;IAqCJ,qBAAC;CA3CD,CAAoC,KAAK,CAAC,SAAS;;;ICHT,wCAAU;IAMlD;QAAA,YACE,iBAAO,SACR;QAPM,mBAAa,GAAU,EAAE,CAAC;QAC1B,YAAM,GAAU,EAAE,CAAC;;KAMzB;IAEM,sCAAO,GAAd,UAAe,IAAS;QAAxB,iBAQC;QAPC,OAAO,IAAI,UAAU,CAAc,UAAA,QAAQ;YACzC,KAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAE,GAAA,CAAC,CAAC;YAC9B,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACzB,OAAO;gBACL,KAAI,CAAC,aAAa,CAAC,OAAO,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,EAAE,GAAA,CAAC,CAAC;aACtC,CAAC;SACH,CAAC,CAAC;KACJ;IAEM,6CAAc,GAArB,UAAsB,MAAgC,EAAE,QAAgB;QAAxE,iBAQC;QARuD,yBAAA,EAAA,gBAAgB;QACtE,UAAU,CAAC;YACD,IAAA,yBAAQ,CAAU;YAC1B,IAAI,CAAC,QAAQ;gBAAE,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;YACzD,IAAI,QAAQ,IAAI,QAAQ,CAAC,QAAQ;gBAAE,QAAQ,CAAC,QAAQ,EAAE,CAAC;YACvD,IAAI,MAAM,CAAC,MAAM,IAAI,QAAQ,CAAC,IAAI;gBAAE,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;YACjE,IAAI,MAAM,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK;gBAAE,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;SAClE,EAAE,MAAM,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;KACvB;IAEM,sCAAO,GAAd,UAAe,QAAa;QAC1B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC9C;IAEM,4CAAa,GAApB,UAAqB,QAAa;QAChC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;KAC5D;IACH,2BAAC;CArCD,CAA0C,UAAU,GAqCnD;SAEe,kBAAkB;IAChC,OAAO,IAAI,oBAAoB,EAAE,CAAC;CACnC;;SCvCe,YAAY,CAC1B,IAAW,EACX,KAAmB,EACnB,SAAc;IAAd,0BAAA,EAAA,cAAc;IAEd,OAAO,IAAI,YAAY,CAAC;QACtB,IAAI,EAAE,cAAc,CAAC;YACnB,OAAO,EAAE,EAAE,KAAK,OAAA,EAAE,SAAS,WAAA,EAAE;YAC7B,MAAM,EAAE,EAAE,IAAI,MAAA,EAAE;SACjB,CAAC;QACF,KAAK,EAAE,IAAI,aAAa,CAAC,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC;KACjD,CAAC,CAAC;CACJ;;SCde,YAAY,CAAI,IAAO;IACrC,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;CACzC;;SCNe,IAAI,CAAC,EAAU;IAC7B,OAAO,IAAI,OAAO,CAAC,UAAA,OAAO,IAAI,OAAA,UAAU,CAAC,OAAO,EAAE,EAAE,CAAC,GAAA,CAAC,CAAC;CACxD;;;;"}