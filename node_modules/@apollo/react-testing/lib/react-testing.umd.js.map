{"version":3,"sources":["../src/mocks/mockLink.ts","../src/mocks/MockedProvider.tsx","../src/mocks/mockSubscriptionLink.ts","../src/utils/createClient.ts","../src/utils/stripSymbols.ts","../src/utils/wait.ts"],"names":["Cache"],"mappings":"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","sourcesContent":["import {\n  Operation,\n  GraphQLRequest,\n  ApolloLink,\n  FetchResult,\n  Observable\n} from 'apollo-link';\nimport {\n  addTypenameToDocument,\n  removeClientSetsFromDocument,\n  removeConnectionDirectiveFromDocument,\n  cloneDeep,\n  isEqual\n} from 'apollo-utilities';\nimport { print } from 'graphql/language/printer';\nimport stringify from 'fast-json-stable-stringify';\n\nimport { MockedResponse, ResultFunction } from './types';\n\nfunction requestToKey(request: GraphQLRequest, addTypename: Boolean): string {\n  const queryString =\n    request.query &&\n    print(addTypename ? addTypenameToDocument(request.query) : request.query);\n  const requestKey = { query: queryString };\n  return JSON.stringify(requestKey);\n}\n\nexport class MockLink extends ApolloLink {\n  public addTypename: Boolean = true;\n  private mockedResponsesByKey: { [key: string]: MockedResponse[] } = {};\n\n  constructor(\n    mockedResponses: ReadonlyArray<MockedResponse>,\n    addTypename: Boolean = true\n  ) {\n    super();\n    this.addTypename = addTypename;\n    if (mockedResponses)\n      mockedResponses.forEach(mockedResponse => {\n        this.addMockedResponse(mockedResponse);\n      });\n  }\n\n  public addMockedResponse(mockedResponse: MockedResponse) {\n    const normalizedMockedResponse = this.normalizeMockedResponse(\n      mockedResponse\n    );\n    const key = requestToKey(\n      normalizedMockedResponse.request,\n      this.addTypename\n    );\n    let mockedResponses = this.mockedResponsesByKey[key];\n    if (!mockedResponses) {\n      mockedResponses = [];\n      this.mockedResponsesByKey[key] = mockedResponses;\n    }\n    mockedResponses.push(normalizedMockedResponse);\n  }\n\n  public request(operation: Operation): Observable<FetchResult> | null {\n    const key = requestToKey(operation, this.addTypename);\n    let responseIndex;\n    const response = (this.mockedResponsesByKey[key] || []).find(\n      (res, index) => {\n        const requestVariables = operation.variables || {};\n        const mockedResponseVariables = res.request.variables || {};\n        if (\n          !isEqual(\n            stringify(requestVariables),\n            stringify(mockedResponseVariables)\n          )\n        ) {\n          return false;\n        }\n        responseIndex = index;\n        return true;\n      }\n    );\n\n    if (!response || typeof responseIndex === 'undefined') {\n      throw new Error(\n        `No more mocked responses for the query: ${print(\n          operation.query\n        )}, variables: ${JSON.stringify(operation.variables)}`\n      );\n    }\n\n    this.mockedResponsesByKey[key].splice(responseIndex, 1);\n\n    const { newData } = response;\n\n    if (newData) {\n      response.result = newData();\n      this.mockedResponsesByKey[key].push(response);\n    }\n\n    const { result, error, delay } = response;\n\n    if (!result && !error) {\n      throw new Error(\n        `Mocked response should contain either result or error: ${key}`\n      );\n    }\n\n    return new Observable(observer => {\n      let timer = setTimeout(\n        () => {\n          if (error) {\n            observer.error(error);\n          } else {\n            if (result) {\n              observer.next(\n                typeof result === 'function'\n                  ? (result as ResultFunction<FetchResult>)()\n                  : result\n              );\n            }\n            observer.complete();\n          }\n        },\n        delay ? delay : 0\n      );\n\n      return () => {\n        clearTimeout(timer);\n      };\n    });\n  }\n\n  private normalizeMockedResponse(\n    mockedResponse: MockedResponse\n  ): MockedResponse {\n    const newMockedResponse = cloneDeep(mockedResponse);\n    newMockedResponse.request.query = removeConnectionDirectiveFromDocument(\n      newMockedResponse.request.query\n    );\n    const query = removeClientSetsFromDocument(newMockedResponse.request.query);\n    if (query) {\n      newMockedResponse.request.query = query;\n    }\n    return newMockedResponse;\n  }\n}\n\n// Pass in multiple mocked responses, so that you can test flows that end up\n// making multiple queries to the server.\n// NOTE: The last arg can optionally be an `addTypename` arg.\nexport function mockSingleLink(...mockedResponses: Array<any>): ApolloLink {\n  // To pull off the potential typename. If this isn't a boolean, we'll just\n  // set it true later.\n  let maybeTypename = mockedResponses[mockedResponses.length - 1];\n  let mocks = mockedResponses.slice(0, mockedResponses.length - 1);\n\n  if (typeof maybeTypename !== 'boolean') {\n    mocks = mockedResponses;\n    maybeTypename = true;\n  }\n\n  return new MockLink(mocks, maybeTypename);\n}\n","import React from 'react';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache as Cache } from 'apollo-cache-inmemory';\nimport { ApolloProvider } from '@apollo/react-common';\nimport { MockLink } from './mockLink';\nimport { MockedProviderProps, MockedProviderState } from './types';\n\nexport class MockedProvider extends React.Component<\n  MockedProviderProps,\n  MockedProviderState\n> {\n  public static defaultProps: MockedProviderProps = {\n    addTypename: true\n  };\n\n  constructor(props: MockedProviderProps) {\n    super(props);\n\n    const {\n      mocks,\n      addTypename,\n      defaultOptions,\n      cache,\n      resolvers,\n      link\n    } = this.props;\n    const client = new ApolloClient({\n      cache: cache || new Cache({ addTypename }),\n      defaultOptions,\n      link: link || new MockLink(mocks || [], addTypename),\n      resolvers\n    });\n\n    this.state = { client };\n  }\n\n  public render() {\n    const { children, childProps } = this.props;\n    return children ? (\n      <ApolloProvider client={this.state.client}>\n        {React.cloneElement(React.Children.only(children), { ...childProps })}\n      </ApolloProvider>\n    ) : null;\n  }\n\n  public componentWillUnmount() {\n    // Since this.state.client was created in the constructor, it's this\n    // MockedProvider's responsibility to terminate it.\n    this.state.client.stop();\n  }\n}\n","import { ApolloLink, FetchResult, Observable } from 'apollo-link';\n\nimport { MockedSubscriptionResult } from './types';\n\nexport class MockSubscriptionLink extends ApolloLink {\n  public unsubscribers: any[] = [];\n  public setups: any[] = [];\n\n  private observer: any;\n\n  constructor() {\n    super();\n  }\n\n  public request(_req: any) {\n    return new Observable<FetchResult>(observer => {\n      this.setups.forEach(x => x());\n      this.observer = observer;\n      return () => {\n        this.unsubscribers.forEach(x => x());\n      };\n    });\n  }\n\n  public simulateResult(result: MockedSubscriptionResult, complete = false) {\n    setTimeout(() => {\n      const { observer } = this;\n      if (!observer) throw new Error('subscription torn down');\n      if (complete && observer.complete) observer.complete();\n      if (result.result && observer.next) observer.next(result.result);\n      if (result.error && observer.error) observer.error(result.error);\n    }, result.delay || 0);\n  }\n\n  public onSetup(listener: any): void {\n    this.setups = this.setups.concat([listener]);\n  }\n\n  public onUnsubscribe(listener: any): void {\n    this.unsubscribers = this.unsubscribers.concat([listener]);\n  }\n}\n\nexport function mockObservableLink(): MockSubscriptionLink {\n  return new MockSubscriptionLink();\n}\n","import { ApolloClient } from 'apollo-client';\nimport { InMemoryCache, NormalizedCacheObject } from 'apollo-cache-inmemory';\nimport { DocumentNode } from 'graphql';\n\nimport { mockSingleLink } from '../mocks/mockLink';\n\nexport function createClient<TData>(\n  data: TData,\n  query: DocumentNode,\n  variables = {},\n): ApolloClient<NormalizedCacheObject> {\n  return new ApolloClient({\n    link: mockSingleLink({\n      request: { query, variables },\n      result: { data },\n    }),\n    cache: new InMemoryCache({ addTypename: false }),\n  });\n}\n","/**\n * Apollo-client adds Symbols to the data in the store. In order to make\n * assertions in our tests easier we strip these Symbols from the data.\n */\nexport function stripSymbols<T>(data: T): T {\n  return JSON.parse(JSON.stringify(data));\n}\n","export function wait(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n"]}